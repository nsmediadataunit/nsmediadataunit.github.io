{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../LayerCake.svelte",
    "../../Html.svelte",
    "../../ScaledSvg.svelte",
    "../../Svg.svelte",
    "../../App.svelte",
    "../../AxisAnnotation.svelte",
    "../../AxisX.svelte",
    "../../AxisY.svelte",
    "../../ClevelandDotPlot.svelte",
    "../../Column.svelte",
    "../../CountryAxisX.svelte",
    "../../CustomAxisX.svelte",
    "../../GroupedBar.svelte",
    "../../Legend.svelte",
    "../../LineSingle.svelte",
    "../../MultiLine.svelte",
    "../../QuadTree.svelte",
    "../../SharedTooltip.svelte",
    "../../TextureLegend.svelte",
    "../../column_chart.svelte",
    "../../dumbbell_chart.svelte",
    "../../grouped_bar.svelte",
    "../../line_annotation.svelte",
    "../../line_chart.svelte",
    "../../multidot_chart.svelte",
    "../../multiline_chart.svelte",
    "../../optionBar.svelte",
    "../../peak_line.svelte",
    "../../scatter_plot.svelte",
    "../../small_multiple.svelte",
    "../../small_multiple_multiline.svelte",
    "../../texture_column_chart.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\n  import { onMount } from 'svelte';\n\n  import { format } from \"d3-format\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { LayerCake, Svg, Html } from 'layercake';\n  import { scaleBand } from 'd3-scale';\n\n  import totalDeath from \"./data/Total deaths attributed to Covid-19 per million population (per capital).csv\";\n  import allData from \"./data/Datasheet for NS data project - All.csv\";\n  import excessDeaths from \"./data/Excess deaths.csv\"\n  import lockdownMeasure from './data/Key lockdown measures.csv';\n  import testingMeasure from './data/A testing time.csv';\n  import stimulusPackage from './data/Stimulus package.csv';\n  import sevenDayAverageDeathsCsv from './data/Seven Day Average Deaths.csv';\n  import stringencyCsv from './data/STRINGENCY LINE CHART DATA.csv';\n  import chartMeta from './data/chartMeta.csv';\n  import creditData from './data/credit-rating.csv';\n  import debtContractRelief from './data/Speed and depth of debt or contract relief.csv'\n\n  import GroupedBar from \"./graphics/grouped_bar.svelte\";\n  import PoliticalLine2 from \"./graphics/political_line_2.svelte\";\n  import ColumnChart from \"./graphics/column_chart.svelte\";\n  import TextureColumnChart from \"./graphics/texture_column_chart.svelte\";\n  import SmallMultipleMultiline from './graphics/small_multiple_multiline.svelte';\n  import SmallMultipleLine from './graphics/small_multiple.svelte';\n  import DumbbellChart from './graphics/dumbbell_chart.svelte';\n  import PeakLine from './graphics/peak_line.svelte';\n  import PoliticalLine from './graphics/political_line.svelte';\n  import ScatterPlot from './graphics/scatter_plot.svelte';\n\n  export let pymChild = {};\n  export let styleNs = false; // serif or san-serif;\n  export let title = \"NSMG-018\";\n\n  function updateHeight() {\n    setTimeout(() => {\n      pymChild.sendHeight()\n    }, 50);\n  }\n\n  let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n\tconst colorScale = {\n    \"BRA\": seriesColors[2],\n    \"CAN\": \"#8399A8\",\n    \"CHN\": seriesColors[4],\n    \"DEU\": \"#8399A8\",\n    \"ESP\": \"#8399A8\",\n    \"FRA\": \"#8399A8\",\n    \"GBR\": seriesColors[0],\n    \"IND\": \"#8399A8\",\n    \"ITA\": seriesColors[3],\n    \"JPN\": \"#8399A8\",\n    \"KOR\": \"#8399A8\",\n    \"RUS\": \"#8399A8\",\n    \"SWE\": \"#8399A8\",\n    \"USA\": seriesColors[1]};\n  \n  const countries = [\"BRA\",\"CAN\",\"CHN\",\"DEU\",\"ESP\",\"FRA\",\"GBR\",\"IND\",\"ITA\",\"JPN\",\"KOR\",\"RUS\",\"SWE\",\"USA\"];\n  const countryNames = [\"Brazil\",\"Canada\",\"China\",\"Germany\",\"Spain\",\"France\",\"UK\",\"India\",\"Italy\",\"Japan\",\"Korea\",\"Russia\",\"Sweden\",\"USA\"];\n\n  const stringency = stringencyCsv.map(d => ({\n    ...d,\n    deaths: +d.deaths,\n    value: +d.value,\n    title: countryNames[countries.indexOf(d.country)],\n  }));\n\n  const sevenDayAverageDeaths = sevenDayAverageDeathsCsv.map(d => ({\n    ...d,\n    title: countryNames[countries.indexOf(d.country)]\n  }))\n\n  let sectionData = [\n    {\n      title: \"Deaths and disease\",\n      isOpen: true,\n      summaryTitle: \"Total deaths attributed to Covid-19\",\n      fieldId: 42,\n      chartMeta: chartMeta.slice(0,5)\n    },\n    {\n      title: \"Lockdown\",\n      isOpen: true,\n      summaryTitle: \"Efficacy of lockdown - drop in personal mobility\",\n      reverse: true,\n      fieldId: 61,\n      chartMeta: chartMeta.slice(5,8).concat(chartMeta[23])\n    },\n    {\n      title: \"Economic\",\n      isOpen: true,\n      summaryTitle: \"Forecast GDP change in 2020\",\n      fieldId: 105,\n      isGrid: true,\n      chartMeta: [chartMeta[8], chartMeta[9]],\n      chartData: [\n        {...chartMeta[10], fieldId: 105},\n        {...chartMeta[11], fieldId: 107},\n        {...chartMeta[12], fieldId: 107, labelPrecision: 0},\n        {...chartMeta[13], fieldId: 17}\n      ]\n    },\n    {\n      title: \"Political\",\n      isOpen: true,\n      summaryTitle: \"Approval ratings change\",\n      chartMeta: [chartMeta[14], chartMeta[15], chartMeta[15]],\n      fieldId: 89\n    },\n    {\n      title: \"Preparedness\",\n      isOpen: true,\n      isGrid: true,\n      chartData: [\n        {...chartMeta[16], fieldId: 70 },\n        {...chartMeta[17], fieldId: 72 },\n        {...chartMeta[18], fieldId: 74 },\n        {...chartMeta[19], fieldId: 78 },\n        {...chartMeta[20], fieldId: 82 },\n        {...chartMeta[21], fieldId: 80 },\n        {...chartMeta[22], fieldId: 81 },\n       ]\n    },\n  ];\n\n  let lockdownAnnotations = [\n    {fieldId: 53, title: \"restrictions being placed on gatherings of 10 people or less.\"},\n    {fieldId: 54, title: \"restrictions being placed on internal movement.\"},\n    {fieldId: 55, title: \"banning arrivals from some regions.\"},\n    {fieldId: 56, title: \"all public events being cancelled.\"},\n    {fieldId: 57, title: \"schools being required to close at all levels.\"},\n    {fieldId: 58, title: \"people being made to stay home besides exceptions for daily exercise, grocery shopping, and 'essential' trips.\"},\n    {fieldId: 59, title: \"public transport being closed or prohibited for most citizens.\"},\n    {fieldId: 60, title: \"some sectors being closed or made to work from home.\"},\n  ];\n\n  let peakAnnotation = [\n    {fieldId: 49, title: \"time to 20% from peak\"}\n  ]\n\n  let pollingData = [\n    {fieldId: 85, title: \"First death\"},\n    {fieldId: 86, title: \"500th death\"},\n    {fieldId: 87, title: \"10,000th death\"},\n    {fieldId: 88, title: \"June 25\"},\n  ]\n\n  lockdownAnnotations = lockdownAnnotations.map(d => {\n    return countries.map(e => ({\n      country: e,\n      title: d.title,\n      value: allData.filter(f => +f.id === d.fieldId)[0][e]\n  }))});\n\n  peakAnnotation = peakAnnotation.map(d => {\n    return countries.map(e => ({\n      country: e,\n      title: d.title,\n      value: allData.filter(f => +f.id === d.fieldId)[0][e]\n  }))});\n\n  pollingData = countries.map(e => {\n    return {\n      key: e,\n      sort: colorScale[e] === \"#8399A8\" ? 0 : 1,\n      values: pollingData.map(d => ({\n      key: d.title,\n      value: +allData.filter(f => +f.id === d.fieldId)[0][e],\n      fill: colorScale[e]\n  })).filter(d => d.value !== 0 && !isNaN(d.value))}\n  }).sort((a, b) => a.sort - b.sort);\n\n  sectionData = sectionData.map(d => ({\n    ...d,\n    data: !d.fieldId ? undefined : countries.map(e => ({\n      country: e,\n      y: (d.reverse ? -1 : 1) * allData.filter(f => +f.id === d.fieldId)[0][e].replace(/,/g, \"\")\n    })),\n    chartData: d.chartData ? d.chartData.map(g => ({\n      ...g,\n      data: countries.map(e => ({\n        country: e,\n        y: (d.reverse ? -1 : 1) * allData.filter(f => +f.id === g.fieldId)[0][e].replace(/,/g, \"\")\n      }))\n    })) : undefined,\n  }));\n\n  let lockdownEase = countries.map(e => ({\n    country: e,\n    y: allData.filter(f => +f.id === 108)[0][e].replace(/,/g, \"\")\n  })).filter(d => d.y !== \"\")\n\n  let creditRating = creditData.map(e => ({\n    code: e.country,\n    country: countryNames[countries.indexOf(e.country)],\n    jan: e.rating_jan,\n    may: e.latest_rating,\n    outlook: e.outlook,\n    diff: e.change_numeric\n  }))\n\n\tonMount(() => {\n    sectionData[0].isOpen = false;\n    sectionData[1].isOpen = false;\n    sectionData[2].isOpen = false;\n    sectionData[3].isOpen = false;\n    sectionData[4].isOpen = false;\n    setTimeout(() => {\n      pymChild.sendHeight()\n    }, 50);\n  });\n\n\n</script>\n\n<svelte:head>\n  <title>{title}</title>\n  <link\n  href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700&display=swap\"\n  rel=\"stylesheet\" />\n</svelte:head>\n\n<div class=\"embed-container\" class:styleNs>\n  <h3>Covid-19 in numbers</h3>\n  <p>To better understand how the UK is dealing with the pandemic, the <em>New Statesman</em> has compiled a database containing dozens of key metrics across 14 major nations. You can explore this data in the sections below.</p>\n  {#each sectionData as section}\n  <details on:click={() => updateHeight()} bind:open={section.isOpen}>\n    <summary>\n      <div class=\"grid-container\">\n        <div class='summary-title {section.title.split(\" \")[0]}'><span class=\"details-chevron\">{section.isOpen ? \"▾\" : \"▸\"}</span>\n        <strong>{section.title}</strong>\n          {#if section.title === \"Deaths and disease\"}\n            <p>More than 500,000 people have had their deaths attributed to Covid-19 worldwide to date, but some countries have been impacted far worse than others. Expand this section to see how the UK compares to other major nations on five different mortality measures.</p>{/if}\n          {#if section.title === \"Lockdown\"}\n            <p>The true efficacy of lockdowns may not be known for some time, however the UK’s approach to implementing restrictions differs in interesting ways to those imposed by its counterparts. Expand this section to explore these differences and their impacts.</p>\n          {/if}\n          {#if section.title === \"Preparedness\"}\n            <p>Infrastructure and pre-planning is key to tackling a major crisis such as that of the coronavirus. In this section we explore whether the UK was comparatively well-prepared for the pandemic and whether there were any areas of critical weakness.</p>\n          {/if}\n          {#if section.title === \"Economic\"}\n            <p>Boris Johnson’s government has pumped an unprecedented level of financial support into the UK in the form of the furlough scheme. But how does this generosity compare internationally, and was it delivered quickly enough? Expand this section to find out.</p>\n          {/if}\n          {#if section.title === \"Political\"}\n            <p>Public confidence in leadership figures is crucial during a pandemic. If the public don’t trust their leaders then why would they follow their advice? Expand this section to see how trust in different governments have fluctuated during the pandemic.</p>\n          {/if}\n        <p><em>Click to see charts</em></p>\n        </div>\n      </div>\n    </summary>\n    <div class=\"section {section.isGrid ? \"grid\" : \"\" }\">\n      {#if section.title === \"Deaths and disease\"}\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[0].title}</h3>\n            <h4>{section.chartMeta[0].subtitle}</h4>\n            <p>{section.chartMeta[0].text}</p>\n          </div>\n          <SmallMultipleMultiline order={[\"UK\",\"Spain\",\"Italy\",\"Sweden\",\"US\",\"France\",\"Brazil\",\"Germany\"]} data={excessDeaths} padding={{top: 20, bottom: 20, left: 24, right: 16}} withArea={true}/>\n          <div class=\"source-text\">Source: FT analysis of international statistical agencies</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[1].title}</h3>\n            <h4>{section.chartMeta[1].subtitle}</h4>\n            <p>{section.chartMeta[1].text}</p>\n          </div>\n          <SmallMultipleLine order={[\"GBR\",\"ITA\",\"SWE\",\"FRA\",\"USA\",\"BRA\",\"CAN\",\"DEU\",\"RUS\",\"IND\",\"JPN\",\"KOR\",\"CHN\"]} data={sevenDayAverageDeaths} toggles={true} padding={{top: 20, bottom: 20, left: 24, right: 16}} />\n          <div class=\"source-text\">Source: {section.chartMeta[1].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[2].title}</h3>\n            <h4>{section.chartMeta[2].subtitle}</h4>\n            <p>{section.chartMeta[2].text}</p>\n          </div>\n          <DumbbellChart data={testingMeasure} xDomain={[-1000,25000]} seriesColors={[\"#ADC3D3\",\"#5B717F\",\"#122834\"]} legend={true} />\n          <div class=\"source-text\">Source: {section.chartMeta[2].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[3].title}</h3>\n            <h4>{section.chartMeta[3].subtitle}</h4>\n            <p>{section.chartMeta[3].text}</p>\n          </div>\n          <ColumnChart formatTickY={(d) => format(\",.0f\")(d)} data={section.data} yTitle={\"Total deaths attributed to Covid-19\"}/>\n          <div class=\"source-text\">Source: {section.chartMeta[3].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[4].title}</h3>\n            <h4>{section.chartMeta[4].subtitle}</h4>\n            <p>{section.chartMeta[4].text}</p>\n          </div>\n          <PeakLine annotations={peakAnnotation} />\n          <div class=\"source-text\">Source: {section.chartMeta[4].source}</div>\n        </div>\n      {/if}\n      {#if section.title === \"Lockdown\"}\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[0].title}</h3>\n            <h4>{section.chartMeta[0].subtitle}</h4>\n            <p>{section.chartMeta[0].text}</p>\n          </div>\n          <SmallMultipleLine order={[\"GBR\",\"ESP\",\"ITA\",\"SWE\",\"FRA\",\"USA\",\"BRA\",\"CAN\",\"DEU\",\"RUS\",\"IND\",\"JPN\",\"KOR\",\"CHN\"]} data={stringency} xField={\"deaths\"} xDomain={[0,500]} xTicks={1} formatTickX={d => d} padding={{top: 20, bottom: 20, left: 24, right: 16}} />\n          <div class=\"source-text\">Source: {section.chartMeta[0].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[1].title}</h3>\n            <h4>{section.chartMeta[1].subtitle}</h4>\n            <p>{section.chartMeta[1].text}</p>\n          </div>\n          <ColumnChart data={section.data} yDomain={[-100, 0]} />\n          <div class=\"source-text\">Source: {section.chartMeta[1].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[2].title}</h3>\n            <h4>{section.chartMeta[2].subtitle}</h4>\n            <p>{section.chartMeta[2].text}</p>\n          </div>\n          <ScatterPlot data={lockdownMeasure} seriesColors={[\"#122834\"]}/>\n          <div class=\"source-text\">Source: {section.chartMeta[2].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[3].title}</h3>\n            <h4>{section.chartMeta[3].subtitle}</h4>\n            <p>{section.chartMeta[3].text}</p>\n          </div>\n          <ColumnChart data={lockdownEase} rotate={false} />\n          <div class=\"source-text\">Source: {section.chartMeta[3].source}</div>\n        </div>\n      {/if}\n      {#if section.title === \"Preparedness\"}\n        {#each section.chartData as chart, i}\n        <div class=\"section-chart {i === 2 ? \"wide\" : \"\"}\">\n          <div class=\"section-chart-header\">\n            <h3>{chart.title}</h3>\n            <h4>{chart.subtitle}</h4>\n            <p>{chart.text}</p>\n          </div>\n          {#if i !== 2}\n          <ColumnChart data={chart.data}/>\n          {:else}\n          <div class=\"checklist\">\n            {#each chart.data as datum}\n              <div class=\"item\"><span>{datum.country}:</span><br><span aria-label=\"{datum.y === 100 ? \"has PPE\" : \"does not have PPE\"}\" class=\"check\">{datum.y === 100 ? \"✅\" : \"❌\"}</span></div>\n            {/each}\n          </div>\n          {/if}\n          <div class=\"source-text\">Source: {chart.source}</div>\n        </div>\n        {/each}\n      {/if}\n      {#if section.title === \"Economic\"}\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[0].title}</h3>\n            <h4>{section.chartMeta[0].subtitle}</h4>\n            <p>{section.chartMeta[0].text}</p>\n          </div>\n          <table class=\"credit-table\">\n            <thead>\n              <tr>\n                <td>Country</td>\n                <td>Jan 2020</td>\n                <td>May 2020</td>\n                <td>Outlook</td>\n              </tr>\n            </thead>\n            <tbody>\n              {#each creditRating as country, i}\n              <tr class=\"{country.code}\">\n                <td>{country.country}</td>\n                <td>{country.jan}</td>\n                <td class=\"{+country.diff === -5 ? \"neg\" :\"\"}\">{country.may}</td>\n                <td class=\"{country.outlook === \"Negative\" ? \"neg\" :\"\"}\">{country.outlook}</td>\n              </tr>\n                {/each}\n            </tbody>\n          </table>\n          <div class=\"source-text\">Source: {section.chartMeta[0].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[1].title}</h3>\n            <h4>{section.chartMeta[1].subtitle}</h4>\n            <p>{section.chartMeta[1].text}</p>\n          </div>\n          <GroupedBar />\n          <div class=\"source-text\">Source: {section.chartMeta[1].source}</div>\n        </div>\n        {#each section.chartData as chart, i}\n          <div class=\"section-chart\">\n              <div class=\"section-chart-header\">\n                <h3>{chart.title}</h3>\n                <h4>{chart.subtitle}</h4>\n                <p>{chart.text}</p>\n              </div>\n                {#if i === 2}\n                  <TextureColumnChart data={debtContractRelief} yDomain={[-60,50]} labelPrecision={chart.labelPrecision} />\n                {:else if i === 3}\n                  <ScatterPlot yAxisLabel={\"% of GDP\"} data={stimulusPackage} seriesColors={[\"#122834\"]} yKey={\"Stimulus package as % of GDP\"} xKey={\"Days between 10th death and first government stimulus measure\"}/>\n                {:else}\n                  <ColumnChart data={chart.data} yDomain={chart.yDomain} />\n                {/if}\n            <div class=\"source-text\">Source: {chart.source}</div>\n          </div>\n        {/each}\n      {/if}\n      {#if section.title === \"Political\"}\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[0].title}</h3>\n            <h4>{section.chartMeta[0].subtitle}</h4>\n            <p>{section.chartMeta[0].text}</p>\n          </div>\n          <PoliticalLine2 data={pollingData} xType=\"band\" />\n          <div class=\"source-text\">Source: {section.chartMeta[0].source}</div>\n        </div>\n        <div class=\"section-chart\">\n          <div class=\"section-chart-header\">\n            <h3>{section.chartMeta[1].title}</h3>\n            <h4>{section.chartMeta[1].subtitle}</h4>\n            <p>{section.chartMeta[1].text}</p>\n          </div>\n          <PoliticalLine />\n          <div class=\"source-text\">Source: {section.chartMeta[1].source}</div>\n        </div>\n      {/if}\n      \n    </div>\n  </details>\n  {/each}\n</div>\n\n<style>\n  @font-face{font-family:\"Unit OT\";src:url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.eot?#iefix\") format(\"embedded-opentype\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.woff\") format(\"woff\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.ttf\") format(\"truetype\"), url(\"/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.svg#unitotregular\") format(\"svg\");font-style:normal;font-weight:normal}\n\n  .embed-container {\n    font-family: Unit OT, sans-serif;\n  }\n\n  em {\n    font-weight: normal;\n  }\n\n.checklist {\n  display: grid;  \n  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));\n}\n\n.checklist .item span {\n  min-width: 30px;\n  display: inline-block;\n}\n\n.checklist .item span.check {\n  font-size: 2em;\n}\n\n.embed-container {\n    width: 100%;\n    max-width: 900px;\n    box-sizing: border-box;\n    border-top: 1px solid #222;\n    border-bottom: 1px solid #222;\n    padding: 8px 0;\n  }\n\n  .details-chevron {\n    font-size: 2em;\n    padding-left: 8px;\n    margin-right: 8px;\n    position: relative;\n    top: 4px;\n  }\n\n  details summary { list-style-type: none; }\n  summary::-webkit-details-marker {\n    display: none;\n  }\n\n  details {\n    border-top: solid #ccc 2px;\n  }\n\n  summary {\n    min-height: 8em;\n  }\n\n  .grid-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    width: 100%;\n  }\n    \n  .section {\n    width: 100%;\n    margin-bottom: 4em;\n  }\n\n  .section.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    grid-gap: 2em;\n  }\n\n  @media (min-width: 600px) {\n    .section-chart.wide {\n      grid-column: span 2;\n    }\n  }\n\n  @media (max-width: 400px) {\n    .section.grid {\n      display: block;\n    }\n  }\n\n  .section {\n    min-height: 200px;\n  }\n\n  .summary-title,\n  .summary-chart,\n  .section {\n    font-weight: initial;\n    text-align: start;\n  }\n  .summary-title { \n    font-family: \"Unit OT\", sans-serif; /* catch IE not loading fonts */\n    font-size: 1em;\n    user-select: none; /* supported by Chrome and Opera */\n   -webkit-user-select: none; /* Safari */\n   -khtml-user-select: none; /* Konqueror HTML */\n   -moz-user-select: none; /* Firefox */\n   -ms-user-select: none; /* Internet Explorer/Edge */\n   padding-right: 25%;\n  }\n\n  .summary-title.Deaths {\n    background: url('https://nsmediadataunit.github.io/live/nsmg-018/images/deaths.png');\n    background-size: 50%;\n    background-position: 100% 100px;\n    background-repeat: no-repeat;\n  }\n\n  .summary-title.Lockdown {\n    background: url('https://nsmediadataunit.github.io/live/nsmg-018/images/1.png');\n    background-size: 50%;\n    background-position: 100% 100px;\n    background-repeat: no-repeat;\n  }\n\n  .summary-title.Economic {\n    background: url('https://nsmediadataunit.github.io/live/nsmg-018/images/2.png');\n    background-size: 50%;\n    background-position: 100% 50px;\n    background-repeat: no-repeat;\n  }\n\n  .summary-title.Political {\n    background: url('https://nsmediadataunit.github.io/live/nsmg-018/images/3.png');\n    background-size: 50%;\n    background-position: 100% 100px;\n    background-repeat: no-repeat;\n  }\n\n  .summary-title.Preparedness {\n    background: url('https://nsmediadataunit.github.io/live/nsmg-018/images/4.png');\n    background-size: 50%;\n    background-position: 100% 100px;\n    background-repeat: no-repeat;\n  }\n\n  @media (max-width: 600px) {\n    .summary-title {\n      padding-right: 5% !important;\n      background: none !important;\n    }\n  }\n\n  @media (min-width: 700px) {\n    .summary-title {\n      background-position: 100% 50px !important;\n    }\n\n    .summary-title.Economic {\n      background-position: 100% 0 !important;\n    }\n  }\n\n  .grid .section-chart-header {\n    min-height: 10em;\n  }\n  \n  @media (max-width: 600px) {\n    .grid .section-chart-header {\n      min-height: unset;\n    }\n  }\n\n  .summary-chart {\n    padding: 0.5em 0;\n  }\n\n  .cta {\n    font-size: 0.75em;\n    font-family: \"Unit OT\", sans-serif; /* catch IE not loading fonts */\n  }\n\n  .neg {\n    font-weight: bold;\n  }\n\n  .credit-table {\n    border-collapse: collapse;\n    width: 100%;\n  }\n  .credit-table td {\n    border-bottom: solid #ccc 2px;\n    padding: 2px;\n  }\n\n  .credit-table thead {\n    font-weight: bold;\n  }\n\n  .credit-table .BRA td {\n    border-bottom: solid #E6C800 2px;\n  }\n  .credit-table .CHN td {\n    border-bottom: solid #00E682 2px;\n  }\n\n  .credit-table .GBR td {\n    border-bottom: solid #E60032 2px;\n  }\n\n  .credit-table .USA td {\n    border-bottom: solid #0063E6 2px;\n  }\n\n  .credit-table .ITA td {\n    border-bottom: solid #E67800 2px;\n  }\n\n\n  :global(.chart-container) {\n    width: 100%;\n    padding: 8px;\n    box-sizing: border-box;\n  }\n\n  :global(.section-chart) {\n    border-top: 1px solid #777;\n    margin: 8px 0;\n    padding-top: 8px;\n    font-family: \"Source Sans Pro\", sans-serif; /* catch IE not loading fonts */\n  }\n\n  :global(.source-text) {\n    color: #607a8a;\n    margin: 8px 0;\n    font-size: 0.75em;\n    font-family: \"Unit OT\", sans-serif; /* catch IE not loading fonts */\n\t}\n\t\n\t:global(button) {\n\t\tmargin: 4px;\n\t}\n\n  header h2,\n  header h4 {\n    text-align: center;\n  }\n\n  :global(h2) {\n    margin: 0;\n    padding: 0;\n    font-family: \"Unit OT\", sans-serif; /* catch IE not loading fonts */\n  }\n\n  :global(h2){\n    text-align: center;\n    font-family: \"Unit OT\", sans-serif; /* catch IE not loading fonts */\n  }\n  \n  :global(h3),\n  :global(h5) {\n\t\tmargin: 0;\n\t\tpadding: 0;\n    font-family: \"Unit OT\", sans-serif; /* catch IE not loading fonts */\n  }\n  \n  :global(h4) {\n\t\tmargin: 0;\n    padding: 0;\n    color: #c1002a;\n    font-weight: normal;\n    font-family: \"Unit OT\", sans-serif; /* catch IE not loading fonts */\n  }\n\n  header {\n    margin-bottom: 2em;\n  }\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\tconst { width, height, padding } = getContext('LayerCake');\n\n\texport let type = \"x\";\n  export let label = \"Placeholder\";\n  export let yOffset = 0;\n\n</script>\n\n{#if type === \"x\"}\n<text text-anchor=\"end\" x={$width + 10} y={$height - 4}>{label}</text>\n{/if}\n\n{#if type === \"y\"}\n<text class=\"y\" transform=\"rotate(90deg)\" text-anchor=\"end\" x={12} y={yOffset}>{label}</text>\n{/if}\n\n<style>\n  text {\n    font-size: 0.75em;\n    fill: #777;\n  }\n\n  text.y {\n    transform: rotate(-90deg);\n  }\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let snapLast = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let yKey = \"\";\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\texport let noZeroLine = false;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\tif(snapLast && i === tickVals.length - 1) {\n\t\t\treturn 'end';\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t{#if !(i === 0 && noZeroLine === true)}\n\t\t\t\t\t<line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\tfill-opacity='{yKey === tick ? 1 : 0.75}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-opacity: 0.5;\n\t}\n\n\t.tick text {\n\t\tfill: #222;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n\texport let ticks = 4;\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let xTick = 0;\n\texport let yTick = 0;\n\texport let dxTick = 0;\n\texport let dyTick = -4;\n\texport let textAnchor = 'start';\n\texport let noZeroLine = false;\n\texport let suffix = \"\";\n\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$yScale.domain() :\n\t\t\t$yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t{#if !(i === 0 && noZeroLine === true)}\n\t\t\t\t\t<line\n\t\t\t\t\t\tx2='100%'\n\t\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\t></line>\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx='{xTick}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n\t\t\t\tdx='{isBandwidth ? -5 : dxTick}'\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n\t\t\t>{formatTick(tick) + suffix}</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-opacity: 0.5;\n\t}\n\n\t.tick text {\n\t\tfill: #222;\n\t}\n\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\timport { scaleOrdinal } from 'd3-scale';\n\n\tconst { data, xGet, yGet, yScale, config, width } = getContext('LayerCake');\n\n\texport let seriesColors;\n\texport let padding = {};\n\n\t$: midHeight = $yScale.bandwidth() / 2;\n\n\t$: colorScale = scaleOrdinal()\n\t\t.domain($config.x)\n\t\t.range(seriesColors);\n\n\tfunction getZerosOut(value, index, self) {\n    \treturn index < 2 ? true : value > self[1] ? true : false;\n\t\t}\n\t\t\n  let colors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n\tconst countryColor = {\n    \"BRA\": colors[2],\n    \"CAN\": \"#8399A8\",\n    \"CHN\": colors[4],\n    \"DEU\": \"#8399A8\",\n    \"ESP\": \"#8399A8\",\n    \"FRA\": \"#8399A8\",\n    \"GBR\": colors[0],\n    \"IND\": \"#8399A8\",\n    \"ITA\": colors[3],\n    \"JPN\": \"#8399A8\",\n    \"KOR\": \"#8399A8\",\n    \"RUS\": \"#8399A8\",\n    \"SWE\": \"#8399A8\",\n\t\t\"USA\": colors[1]};\n</script>\n\n{#each $data as row, i}\n\t\t<rect\n\t\t\tx={0}\n\t\t\twidth={$width}\n\t\t\ty={$yGet(row)}\n\t\t\theight={$yScale.bandwidth()}\n\t\t\tfill={countryColor[row.country]}\n\t\t\tfill-opacity={0.05}\n\t\t/>\n{/each}\n\n<g class=\"dot-group\">\n\t{#each $data as row}\n\t\t\n\t\t<g>\n\t\t\t<line\n\t\t\t\tx1=\"{Math.min(...$xGet(row).filter( getZerosOut ))}\"\n\t\t\t\ty1=\"{$yGet(row) + midHeight}\"\n\t\t\t\tx2=\"{Math.max(...$xGet(row).filter( getZerosOut ))}\"\n\t\t\t\ty2=\"{$yGet(row) + midHeight}\"\n\t\t\t></line>\n\n\t\t\t{#each $xGet(row).filter( getZerosOut ) as circleX, i}\n\t\t\t\t<circle\n\t\t\t\t\tcx=\"{circleX}\"\n\t\t\t\t\tcy=\"{$yGet(row) + midHeight}\"\n\t\t\t\t\tr=\"5\"\n\t\t\t\t\tfill=\"{colorScale($config.x[i])}\"\n\t\t\t\t/>\n\t\t\t{/each}\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\tline {\n\t\tstroke-width: 1px;\n\t\tstroke: #ccc;\n\t\tfill-opacity:0.5;\n\t}\n\tcircle {\n\t\tfill-opacity:0.8;\n\t\tstroke: #364b58;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\timport { format } from 'd3-format';\n\n\tconst { data, xGet, yGet, width, height, xScale } = getContext('LayerCake');\n\n\t$: columnHeight = d => {\n\t\treturn Math.abs($yGet({value: 0}) - $yGet(d));\n\t};\n\n\t/* --------------------------------------------\n\t * Default styles\n\t */\n\texport let fill = '#00e047';\n\texport let keyFill = '#18a1cd';\n\texport let yKey = '';\n\texport let stroke = '';\n\texport let strokeWidth = 0;\n\texport let withTexture = false;\n\texport let labelPrecision;\n\n  let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n\tconst colorScale = {\n    \"BRA\": seriesColors[2],\n    \"CAN\": \"#8399A8\",\n    \"CHN\": seriesColors[4],\n    \"DEU\": \"#8399A8\",\n    \"ESP\": \"#8399A8\",\n    \"FRA\": \"#8399A8\",\n    \"GBR\": seriesColors[0],\n    \"IND\": \"#8399A8\",\n    \"ITA\": seriesColors[3],\n    \"JPN\": \"#8399A8\",\n    \"KOR\": \"#8399A8\",\n    \"RUS\": \"#8399A8\",\n    \"SWE\": \"#8399A8\",\n    \"USA\": seriesColors[1]};\n\n</script>\n\n\n<g class=\"column-group\">\n\t{#each $data as d, i}\n\t\t\n\t\t{#if withTexture && d.category > 0}\n\t\t\t<defs>\n\t\t\t\t<pattern id=\"boldStripe{i}\" width=\"5\" height=\"5\" patternTransform=\"rotate(135 0 0)\" patternUnits=\"userSpaceOnUse\">\n\t\t\t      <rect width=\"100%\" height=\"100%\" fill-opacity=1 fill=\"white\" stroke=none/>\n\t\t\t      <line stroke={colorScale[d.key]} stroke-width=\"7\" stroke-opacity=\"1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"20\" />\n\t\t\t    </pattern>\n\t\t\t</defs>\n\t\t{/if}\n\t\t\n\t\t<rect\n\t\t\tclass='group-rect'\n\t\t\tdata-id=\"{i}\"\n\t\t\tx=\"{$xGet(d)}\"\n\t\t\ty=\"{d.value > 0 ? $yGet(d) : $yGet({value: 0})}\"\n\t\t\twidth={$xScale.bandwidth()}\n\t\t\theight=\"{columnHeight(d)}\"\n\t\t\tfill = {!withTexture ? colorScale[d.key] : d.category > 0 ? 'url(#boldStripe'+i+')' : colorScale[d.key]}\n\t\t\tfill-opacity = \"0.8\"\n\t\t\tstroke=\"{stroke}\"\n\t\t\tstroke-width=\"{strokeWidth}\"\n\t\t></rect>\n\t\t{#if d.key == yKey}\n\t\t\t<text \n\t\t\t\tx=\"{$xGet(d)+$xScale.bandwidth()/2}\"\n\t\t\t\ty=\"{d.value > 0 ? $yGet(d)-5 : $yGet({value: 0}) - 5}\"\n\t\t\t>{format(`,.${labelPrecision !== undefined ? labelPrecision : d.value > 10 ? 0 : 1}f`)(d.value)}</text>\n\t\t{/if}\n\t{/each}\n</g>\n\n<style>\n\t.column-group {\n\t\tfont-size: .725em;\n\t\tfont-weight: bold;\n\t}\n\n\t.column-group text {\n\t\tfill: #666;\n\t\ttext-anchor: middle;\n\t}\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let yKey = \"\";\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\texport let rotate = true;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tclass={$width > 300 || !rotate ? \"\" : \"rotate\"}\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\tfill-opacity='{yKey === tick ? 1 : 0.75}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t}\n\n\t.tick text {\n\t\tfill: #222;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n\n\t.rotate {    \n\t\ttransform: rotate(-90deg) translate(-25px, -7px);\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let yKey = \"\";\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\texport let overrideMiddle = \"\";\n\texport let showTick = 40;\n\n\t$: ticks = 6; //$width > 600 ? 6 : 4;\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n\t\n\tfunction getTickText(tick, i) {\n\t\tif(tick === 0 && overrideMiddle !== \"\") {\n\t\t\treturn overrideMiddle;\n\t\t}\n\t\telse {\n\t\t return (Math.abs(tick) === showTick ? formatTick(Math.abs(tick)) + \" days \" + (tick < 0 ? \"before\" : \"after\") : \"\")\n\t\t}\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if tick === 0 || gridlines === true}\n\t\t\t\t<line class=\"{tick === 0 ? \"highlight\" : \"\"}\" y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\tfill-opacity='{yKey === tick ? 1 : 0.75}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{getTickText(tick, i)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-opacity: 0.5;\n\t}\n\n\tline.highlight {\n\t\tstroke-opacity: 1;\n\t}\n\n\t.tick text {\n\t\tfill: #222;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');\n\t\n  export let colorScale = [\"#00bbff\"];\n  const reversed_data = $data.reverse();\n</script>\n\n{#each reversed_data as e, i}\n<g class=\"bar-group\">\n\t{#each e as d, j}\n\t\t<rect\n\t\t\tclass='group-rect'\n\t\t\tdata-id=\"{j}\"\n\t\t\tx=\"{$xScale.range()[0]}\"\n\t\t\ty=\"{$yGet(d) + ($yScale.bandwidth() / reversed_data.length) * i}\"\n\t\t\theight={$yScale.bandwidth() / reversed_data.length}\n\t\t\twidth=\"{$xGet(d)}\"\n      fill={colorScale[d.fill]}\n\t\t\tfill-opacity={1 / ((reversed_data.length-i) / 2)}\n\t\t></rect>\n\t{#if d.annotation}\n\t\t<text\n\t\t\tx=\"{$xScale.range()[0] + 2}\"\n\t\t\ty=\"{$yGet(d) + ($yScale.bandwidth() / reversed_data.length) * 2 - 4}\"\n\t\t>\n\t\t{d.annotation}\n\t\t</text>\n\t{/if}\n\t{/each}\n</g>\n{/each}\n\n<style>\n\ttext {\n\t\tfont-size: 0.725rem;\n\t\tfill: #222;\n\t}\n</style>",
    "<script>\n\n\texport let legendNames = [\"Brazil\",\"China\",\"UK\",\"Italy\",\"USA\"];\n\texport let seriesColors = [\"#E6C800\",\"#00E682\",\"#E60032\",\"#E67800\",\"#0063E6\"];\n\texport let inTheChart = undefined;\n\n\tif (inTheChart){\n\t\tconst new_legendNames = inTheChart.filter(d => legendNames.indexOf(d) >= 0);\n\t\tconst new_seriesColors = new_legendNames.map(d => seriesColors[legendNames.indexOf(d)]);\n\n\t\tlegendNames = new_legendNames;\n\t\tseriesColors = new_seriesColors;\n\t}\n</script>\n\n<div class='layercake-legends'>\n\t{#each legendNames as d, i}\n\t\t<div class='layercake-legend' data-id='{i}'> \n\t\t\t<div class='layercake-legend-circle' style='background:{seriesColors[i]}'></div>\n\t\t\t<div class='layercake-legend-label'><span>{d}</span></div>\n\t\t</div>\n\t{/each}\n</div>\n\n<style>\n\t.layercake-legend {\n\t\tdisplay: inline-block;\n\t    vertical-align: top;\n\t    margin-right: 2em;\n\t    white-space: nowrap;\n\t\t\n\t}\n\t.layercake-legend-circle {\n\t\tdisplay: inline-block;\n\t    vertical-align: middle;\n\t    width: 1em;\n\t    height: 1em;\n\t    border-radius: 100%;\n\t}\n\t.layercake-legend-label {\n\t\tfont-size: 12px;\n\t\tdisplay: inline-block;\n    \tvertical-align: middle;\n\t}\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\tconst { data, xGet, yGet } = getContext('LayerCake');\n\n\texport let stroke = '#ffffff';\n\texport let dotted = \"\";\n\n\t$: path = (d) => {\n\t\treturn 'M' + d\n\t\t.map(d => {\n\t\t\treturn $xGet(d) + ',' + $yGet(d);\n\t\t})\n\t\t.join('L');\n\t}\n</script>\n\n<path class='path-line {dotted}' d='{path($data)}' {stroke}></path>\n\n<style>\n\t.path-line {\n\t\tfill: none;\n\t\tstroke-linejoin: round;\n\t\tstroke-linecap: round;\n\t\tstroke-width: 2;\n\t}\n\n\t.dotted {\n\t\tstroke-dasharray: 5,5;\n\t}\n</style>\n\n\n",
    "<script>\n\timport { getContext } from 'svelte';\n\timport LineAnnotation from '../graphics/line_annotation.svelte';\n\n\tconst { data, xGet, yGet, xScale } = getContext('LayerCake');\n\n\texport let colorScale = d => '#000';\n\texport let annotations = [];\n\texport let opactiy = 1;\n\n\t$: xOffset = $xScale.bandwidth ? $xScale.bandwidth() / 2 : 0;\n\n\t$: getAnnotation = (group) => {\n\t\tlet annotation = annotations[0].filter(d => d.country === group.key)[0];\n\t\tif(annotation) {\n\t\t\tlet chartVal = group.values.filter(d => d.key === +annotation.value)[0];\n\n\t\t\treturn [\n\t\t\t\t{...annotation,\n\t\t\t\tyVal: +chartVal.value}\n\t\t\t];\n\t\t}\n\t\treturn [];\n\t}\n\n\t$: path = values => {\n\t\treturn 'M' + values\n\t\t\t.map(d => {\n\t\t\t\treturn $xGet(d) + xOffset + ',' + $yGet(d);\n\t\t\t})\n\t\t\t.join('L');\n\t};\n\n</script>\n\n<g class=\"line-group\">\n\t{#each $data as group}\n\t\t<path\n\t\t\tclass='path-line'\n\t\t\td='{path(group.values)}'\n\t\t\tstroke=\"{colorScale[group.key]}\"\n\t\t\tstroke-opacity={opactiy}\n\t\t></path>\n\t\t{#if annotations.length > 0}\n\t\t\t<LineAnnotation\n\t\t\t\tannotations={getAnnotation(group)}\n\t\t\t\tfill=\"{colorScale[group.key]}\"\n\t\t\t/>\n\t\t{/if}\n\t{/each}\n</g>\n\n<style>\n\t.path-line {\n\t\tfill: none;\n\t\tstroke-linejoin: round;\n\t\tstroke-linecap: round;\n\t\tstroke-width: 2px;\n\t}\n</style>\n",
    "<script>\n  import { getContext } from 'svelte';\n  import { quadtree } from 'd3-quadtree';\n\n  const { data, xGet, yGet, width, height } = getContext('LayerCake');\n\n  let visible = false;\n  let found = {};\n  let e = {};\n\n  export let dataset = undefined;\n  export let x = 'x';\n  export let y = 'y';\n  export let searchRadius = undefined;\n\n  $: xGetter = x === 'x' ? $xGet : $yGet;\n  $: yGetter = y === 'y' ? $yGet : $xGet;\n\n  function findItem (evt) {\n    e = evt;\n\n    const xLayerKey = `layer${x.toUpperCase()}`;\n    const yLayerKey = `layer${y.toUpperCase()}`;\n\n    found = finder.find(evt[xLayerKey], evt[yLayerKey], searchRadius) || {};\n    visible = Object.keys(found).length > 0;\n  }\n\n  $: finder = quadtree()\n    .extent([[-1, -1], [$width + 1, $height + 1]])\n    .x(xGetter)\n    .y(yGetter)\n    .addAll(dataset || $data);\n\n</script>\n\n<style>\n  .bg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n</style>\n\n<div\n  class=\"bg\"\n  on:mousemove=\"{findItem}\"\n  on:mouseout=\"{() => visible = false}\"\n></div>\n<slot\n  x={xGetter(found) || 0}\n  y={yGetter(found) || 0}\n  {found}\n  {visible}\n  {e}\n></slot>",
    "<script>\n  import { getContext } from 'svelte';\n  import { format } from 'd3-format';\n\n  import QuadTree from './QuadTree.svelte';\n\n  const { data, width, yScale, config } = getContext('LayerCake');\n\n  const commas = format(',');\n  const titleCase = d => d.replace(/^\\w/, w => w.toUpperCase());\n\n  export let tooltipOffset = 20;\n  export let dataset = undefined;\n  export let formatTitle = d => d;\n  export let formatKey = d => titleCase(d);\n  export let formatValue = d => isNaN(+d) ? d : commas(d);\n  export let title = \"\";\n  export let highlight = undefined;\n  export let unit = \"\";\n\n  const w = 150;\n  const w2 = w / 2;\n  let top = 0;\n\n  /* --------------------------------------------\n   * Sort the keys by the highest value\n   */\n  function sortResult(result) {\n    if (Object.keys(result).length === 0) return [];\n    const rows = $data\n      .filter(d => highlight ? highlight.indexOf(d.key) !== -1 : true)\n      .map(country => {\n        let datum = country.values.find(d => result.key == d.key);\n        return {\n          key: country.key,\n          value: datum ? country.values.find(d => result.key == d.key).value.toFixed(2)+unit : undefined\n        };\n      })\n      .filter(d => d.value !== undefined)\n      .sort((a, b) => b.value - a.value);\n    return rows;\n  }\n</script>\n\n<style>\n  .tooltip {\n    position: absolute;\n    font-size: 13px;\n    pointer-events: none;\n    border: 1px solid #ccc;\n    background: rgba(255, 255, 255, 0.85);\n    transform: translate(-50%, -100%);\n    padding: 5px;\n    z-index: 15;\n    pointer-events: none;\n  }\n  .line {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 1px;\n    border-left: 1px dotted #666;\n    pointer-events: none;\n  }\n  .tooltip,\n  .line {\n    transition: left 250ms ease-out, top 250ms ease-out;\n  }\n  .title {\n    font-weight: bold;\n  }\n  .key {\n    color: #999;\n  }\n</style>\n\n<QuadTree\n  dataset={dataset || $data}\n  y='x'\n  let:x\n  let:y\n  let:visible\n  let:found\n  let:e\n>\n  {#if sortResult(found)[0]}\n    <div\n      style=\"left:{x}px;\"\n      class=\"line\"></div>\n    <div\n      class=\"tooltip\"\n      style=\"\n        width:{w}px;\n        display: { visible ? 'block' : 'none' };\n        top:{$yScale(sortResult(found)[0].value) - tooltipOffset}px;\n        left:{Math.min(Math.max(w2, x), $width - w2)}px;\"\n      >\n        <div class=\"title\">{title}</div>\n        <div class=\"subtitle\">{Math.abs(found.key)} days {found.key < 0 ? \"before peak\" : \"after peak\"}</div>\n        {#each sortResult(found) as row}\n          <div class=\"row\"><span class=\"key\">{formatKey(row.key)}:</span> {formatValue(row.value)}</div>\n        {/each}\n    </div>\n  {/if}\n</QuadTree>",
    "<script>\n\n\texport let color = \"#ccc\";\n\texport let legendNames;\n\t\n</script>\n\n<div class='layercake-legends'>\n\t{#each legendNames as d, i}\n\t\t{#if d !== \"\"}\n\t\t\t{#if i === 0}\n\t\t\t\t<div class='layercake-legend' data-id='{i}'> \n\t\t\t\t\t<div class='layercake-legend-rect' style='background:{color}'></div>\n\t\t\t\t\t<div class='layercake-legend-label'><span>{d}</span></div>\n\t\t\t\t</div>\n\t\t\t{:else}\n\t\t\t\t<div class='layercake-legend' data-id='{i}'> \n\t\t\t\t\t<svg width=\"1em\" height=\"1em\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<defs>\n\t\t\t\t\t\t\t<pattern id=\"boldStripe\" width=\"5\" height=\"5\" patternTransform=\"rotate(135 0 0)\" patternUnits=\"userSpaceOnUse\">\n\t\t\t\t\t\t      <rect width=\"100%\" height=\"100%\" fill-opacity=1 fill=\"white\" stroke=none/>\n\t\t\t\t\t\t      <line stroke={color} stroke-width=\"7\" stroke-opacity=\"1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"20\" />\n\t\t\t\t\t\t    </pattern>\n\t\t\t\t\t\t</defs>\n\t\t\t\t\t\t<rect width=\"1em\" height=\"1em\" fill=url(#boldStripe) stroke=\"none\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<div class='layercake-legend-label'><span>{d}</span></div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/if}\n\t{/each}\n</div>\n\n<style>\n\t.layercake-legend {\n\t\tdisplay: inline-block;\n\t    vertical-align: top;\n\t\t\tmargin: 0em 8px 0em;\n\t    white-space: nowrap;\n\t\t\n\t}\n\t.layercake-legend-rect {\n\t\tdisplay: inline-block;\n\t    vertical-align: middle;\n\t    width: 1em;\n\t    height: 1em;\n\t}\n\t.layercake-legend-label {\n\t\tfont-size: 12px;\n\t\tdisplay: inline-block;\n    \tvertical-align: middle;\n\t}\n</style>",
    "<script>\n  import { LayerCake, Svg, calcExtents } from \"layercake\";\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n\n  import Column from '../components/Column.svelte';\n  import AxisX from '../components/CountryAxisX.svelte';\n  import AxisY from '../components/AxisY.svelte';\n\n  export let yDomain = [0, null];\n  export let data = [];\n  export let yField = \"y\";\n  export let yTitle = \"\";\n  export let ySuffix = \"\";\n  export let yKey = \"GBR\";\n  export let formatTickY = d => d + ySuffix;\n  export let rotate = true;\n\n  let chartData = data.map(d => ({\n    key: d.country,\n    value: +d[yField],\n  })).sort((a, b) => a.value - b.value);\n\n  const countries = chartData.map(d => d.key);\n\n</script>\n\n  <div class=\"chart-container\">\n    <LayerCake\n        padding={{ top: 30, right: 0, bottom: 30, left: 40 }}\n        x='key'\n        y='value'\n        xScale={scaleBand().paddingInner([0.33]).round(true)}\n        xDomain={countries}\n        {yDomain}\n        data={chartData}\n      >\n\n      <Svg>\n        <AxisX\n          gridlines={false}\n          {yKey}\n          {rotate}\n        />\n        <AxisY\n          ticks={2}\n          gridlines={true}\n          formatTick={formatTickY}\n        />\n        <Column fill=\"#aedeee\" {yKey}/>\n      </Svg>\n    </LayerCake>\n  </div>\n\n<style>\n  .chart-container{\n    width: 100%;\n    height: 12em;\n  }\n</style>",
    "<script>\n  import { LayerCake, Svg, flatten } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { scaleBand, scaleOrdinal } from \"d3-scale\";\n  import { format } from \"d3-format\";\n\n  import ClevelandDotPlot from \"../components/ClevelandDotPlot.svelte\";\n  import AxisX from '../components/AxisX.svelte';\n  import AxisY from '../components/AxisY.svelte';\n  import Legend from '../components/Legend.svelte';\n\n  export let padding = { top: 16, right: 20, bottom: 20, left: 30 };\n  export let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n  export let data = [];\n  export let xDomain = [0,null];\n  export let xTicks = 3;\n  export let yTicks = 4;\n  export let formatTick = format(\",.0f\");\n  export let noZeroLine = false;\n  export let legend = false;\n\n  const yKey = 'country';\n  const yDomain = data.map(d => d[yKey]).filter( onlyUnique ).sort((a, b) => a - b); \n  const xKey = Object.keys(data[0]).filter(d => d !== yKey);\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n</script>\n\n{#if legend}\n    <Legend {seriesColors} legendNames={xKey}/>\n{/if}\n\n<div class=\"chart-container\">\n  \n  <LayerCake\n    {padding}\n    x={xKey}\n    y={d => d[yKey]}\n    yDomain={yDomain}\n    yScale={scaleBand().paddingInner([0.05]).round(true)}\n    xDomain={xDomain}\n    zScale={scaleOrdinal()}\n    zDomain={xKey}\n    zRange={seriesColors}\n    data={data}\n  >\n    <Svg>\n      <AxisX\n        ticks={xTicks}\n        gridlines={true}\n        {noZeroLine} \n        {formatTick} />\n      <AxisY ticks={yTicks} gridlines={false}/>\n      <ClevelandDotPlot {padding} {seriesColors} />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  .chart-container{\n    width: 100%;\n    height: 25em;\n  }\n\n  @media (max-width: 500px) {\n    .chart-container{\n      height: 15em;\n    }\n  }\n</style>",
    "<script>\n  import { LayerCake, Html, Svg, uniques, flatten } from 'layercake';\n  import { scaleBand } from 'd3-scale';\n  import { format } from 'd3-format';\n\n  import csvData from '../data/unemployment.csv';\n\n  import Bar from '../components/GroupedBar.svelte';\n  import AxisX from '../components/AxisX.svelte';\n  import AxisY from '../components/AxisY.svelte';\n\n  const fields = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"].reverse();\n  const countries = [\"BRA\",\"CAN\",\"CHN\",\"DEU\",\"ESP\",\"FRA\",\"GBR\",\"IND\",\"ITA\",\"JPN\",\"KOR\",\"RUS\",\"SWE\",\"USA\"];\n  const countryNames = [\"Brazil\",\"Canada\",\"China\",\"Germany\",\"Spain\",\"France\",\"UK\",\"India\",\"Italy\",\"Japan\",\"Korea\",\"Russia\",\"Sweden\",\"USA\"];\n\n  let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n\tconst colorScale = {\n    \"BRA\": seriesColors[2],\n    \"CAN\": \"#8399A8\",\n    \"CHN\": seriesColors[4],\n    \"DEU\": \"#8399A8\",\n    \"ESP\": \"#8399A8\",\n    \"FRA\": \"#8399A8\",\n    \"GBR\": seriesColors[0],\n    \"IND\": \"#8399A8\",\n    \"ITA\": seriesColors[3],\n    \"JPN\": \"#8399A8\",\n    \"KOR\": \"#8399A8\",\n    \"RUS\": \"#8399A8\",\n    \"SWE\": \"#8399A8\",\n    \"USA\": seriesColors[1]};\n  \n  let data = [\n    countries.map((d, i) => ({\n    fill: d,\n    key: countryNames[i],\n    value: +csvData[0][d]})),\n    countries.map((d, i) => ({\n    fill: d,\n    key: countryNames[i],\n    value: +csvData[1][d]})),\n    countries.map((d, i) => ({\n    fill: d,\n    key: countryNames[i],\n    value: +csvData[2][d]})),\n    countries.map((d, i) => ({\n    fill: d,\n    key: countryNames[i],\n    value: +csvData[3][d]})),\n  ];\n\n  const yDomain = countryNames;\n</script>\n\n<style>\n  .svg-container {\n    width: 100%;\n    height: 400px;\n    min-height: 200px;\n    padding: 8px;\n  }\n\n  @media (max-width: 600px) {\n    .svg-container {\n      height: 15em;\n    }\n  }\n\n  .legend-item {\n    display: inline-block;\n    background: #8399A8;\n    width: 20px;\n    height: 10px;\n    margin-left: 1em;\n  }\n</style>\n\n<div class=\"legend\">\n  {#each fields.reverse() as field, i}\n    <span class=\"legend-item\" style=\"opacity:{1 / ((fields.length - i) / 2)}\"></span> {field} 2020\n  {/each}\n</div>\n\n<div class=\"svg-container\">\n  <LayerCake\n    padding={{ top: 16, bottom: 16, left: 52, right: 16 }}\n    x='value'\n    y='key'\n    yScale={scaleBand().paddingInner([0.2]).round(true)}\n    {yDomain}\n    xDomain={[0, null]}\n    {data}\n    flatData={flatten(data)}\n  > \n    <Svg>\n      <AxisX\n        ticks={4}\n        gridlines={true}\n        baseline={true}\n        formatTick={d => format(\",.0f\")(d)}\n      />\n      <AxisY\n        gridlines={false}\n        baseline={true}\n        formatTick={d => d}\n        hours={csvData.map(d => d.time)}\n      />\n      <Bar {colorScale} />\n    </Svg>\n  </LayerCake>\n</div>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { xGet, yGet, data, width, height } = getContext('LayerCake');\n\n  export let annotations = [];\n  export let fill;\n\n  annotations = annotations.filter(d => d.value !== \"\");\n\n  $: getY = (annotation) => {\n    const yVal = annotation.yVal; //$data.slice(0).filter(d => d.key === +annotation.value);\n    return $yGet({value: yVal}); //yVal.length > 0 ? $yGet(yVal[0]) : $yGet({value: 0});\n  }\n  \n  let colors = [\"#E60032\",\"#0063E6\",\"#00E682\",\"#E6C800\",\"#E67800\"];\n\n</script>\n\n{#each annotations as annotation, i}\n  <circle fill=\"{fill || colors[i % 5]}\" r=\"4\" cx=\"{$xGet({key: +annotation.value})}\" cy=\"{getY(annotation)}\">\n    <title>{annotation.title}</title>\n  </circle>\n{/each}\n\n<style>\n  circle {\n    stroke: #222;\n  }\n</style>",
    "<script>\n  import { LayerCake, Svg, flatten } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { scaleTime } from \"d3-scale\";\n  import { format } from \"d3-format\";\n\n  import Line from \"../components/LineSingle.svelte\";\n  import AxisX from \"../components/AxisX.svelte\";\n  import AxisY from \"../components/AxisY.svelte\";\n  import ScatterSvg from \"../components/ScatterSvg.svelte\";\n  import AxisAnnotation from '../components/AxisAnnotation.svelte';\n\n  export let padding = { top: 16, right: 20, bottom: 20, left: 30 };\n  export let data = [];\n  export let xField = \"date\";\n  export let yDomain = [0, null];\n  export let xDomain = undefined;\n  export let xTicks = 3;\n  export let yTicks = 4;\n  export let formatTickX = timeFormat('%b %-d');\n  export let stroke = \"\";\n  export let showAnnotation = false;\n  export let isSmallMultiple = false;\n\n  const defFormat = format(',.0f');\n\n</script>\n<div class=\"chart-container {isSmallMultiple ? \"small\" : \"\"}\">\n  <LayerCake\n    {padding}\n    x={d => d[xField]}\n    y={d => +d.value}\n    {xDomain}\n    yDomain={yDomain}\n    data={data}\n    flatData={flatten(data)}>\n    <Svg>\n      <AxisX\n        ticks={xTicks}\n        gridlines={false}\n        snapTicks={false}\n        formatTick={formatTickX} />\n      <AxisY ticks={yTicks} gridlines={true} formatTick={d => defFormat(d)} />\n      <Line stroke={stroke} />\n      {#if showAnnotation}\n        <AxisAnnotation type=\"x\" label=\"Deaths\" />\n        <AxisAnnotation type=\"y\" label=\"Stringency\" yOffset={8} />\n      {/if}\n    </Svg>\n  </LayerCake>\n</div>\n<style>\n  .chart-container{\n    width: 100%;\n    height: 15em;\n  }\n\n  .chart-container.small {\n    height: 8em;\n  }\n</style>",
    "<script>\n  import { LayerCake, Svg, flatten } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n\n  import Dot from \"../components/ScatterSvgScaleBand.svelte\";\n  import MultiLine from \"../components/MultiLine.svelte\";\n  import AxisX from \"../components/AxisX.svelte\";\n  import AxisY from \"../components/AxisY.svelte\";\n\n  export let padding = { top: 16, right: 20, bottom: 20, left: 30 };\n  export let colorScale;\n  export let data = [];\n  export let yDomain = [0, null];\n  export let xDomain = undefined;\n  export let xField = \"date\";\n  export let xTicks = 3;\n  export let xLines = false;\n  export let yTicks = 4;\n  export let formatTickX = timeFormat('%b %-d');\n  export let height = \"\";\n  export let annotations = [];\n\n  const defFormat = format(',.0f');\n\n</script>\n<div class=\"chart-container {height}\">\n  <LayerCake\n    {padding}\n    x={d => d[xField]}\n    y={d => +d.value}\n    yDomain={yDomain}\n    xDomain={xDomain}\n    xScale={scaleBand()}\n    data={data}\n    flatData={flatten(data.map(d=> d.values))}>\n    <Svg>\n      <AxisX\n        ticks={xTicks}\n        gridlines={xLines}\n        formatTick={formatTickX} />\n      <AxisY gridlines={true} formatTick={d => defFormat(d)} />\n      <MultiLine {colorScale} {annotations} opactiy={0.5} />\n      <Dot {colorScale} {annotations} />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  .chart-container{\n    width: 100%;\n    height: 15em;\n  }\n\n  .tall {\n    height: 25em;\n  }\n\n  @media (max-width: 500px) {\n    .chart-container{\n      height: 15em;\n    }\n  }\n</style>",
    "<script>\n  import { LayerCake, Svg, flatten } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { format } from \"d3-format\";\n\n  import MultiLine from \"../components/MultiLine.svelte\";\n  import Area from \"../components/AreaInBetween.svelte\";\n  import AxisX from \"../components/AxisX.svelte\";\n  import AxisY from \"../components/AxisY.svelte\";\n\n  export let padding = { top: 16, right: 20, bottom: 20, left: 30 };\n  export let colorScale;\n  export let data = [];\n  export let yDomain = [0, null];\n  export let xField = \"date\";\n  export let xTicks = 2;\n  export let xLines = false;\n  export let yTicks = 3;\n  export let formatTickX = timeFormat('%b %-d');\n  export let height = \"\";\n  export let annotations = [];\n  export let withArea = false;\n  export let isSmallMultiple = false;\n\n  const defFormat = format(',.0f');\n\n</script>\n<div class=\"chart-container {height} {isSmallMultiple ? \"small\" : \"\"}\">\n  <LayerCake\n    {padding}\n    x={d => d[xField]}\n    y={d => +d.value}\n    yDomain={yDomain}\n    data={data}\n    flatData={flatten(data.map(d => d.values))}>\n    <Svg>\n      {#if withArea}\n        <Area {colorScale} />\n      {/if}\n      <AxisX\n        ticks={[timeParse(\"%d/%m/%y\")(\"26/01/20\"), timeParse(\"%d/%m/%y\")(\"20/05/20\")]}\n        gridlines={xLines}\n        snapLast={true}\n        formatTick={formatTickX} />\n      <AxisY ticks={yTicks} gridlines={true} formatTick={d => defFormat(d)} />\n      <MultiLine {colorScale} {annotations} />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  .chart-container{\n    width: 100%;\n    height: 15em;\n  }\n\n  .tall {\n    height: 25em;\n  }\n\n\n  @media (max-width: 500px) {\n    .chart-container{\n      height: 15em;\n    }\n  }\n\n  .chart-container.small {\n    height: 8em;\n  }\n</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  const dispatch = createEventDispatcher();\n\n  function setSearch() {\n    dispatch('message', event.target.value);\n  }\n\n  export let fields = [];\n  export let searchTerm = fields[0];\n\n  let search = \"field-list\"\n\n</script>\n\n<label for=\"searchbar\">Days between 10th death date and</label>\n<select id=\"{search}\" bind:value={searchTerm} on:change={(evt) => setSearch(evt)} list=\"{search}\">\n  {#each fields as d,i}\n    <option value=\"{d}\">{d}</option>\n  {/each}\n</select>\n\n<style>\n  select {\n\n  }\n  label {\n    float: left;\n    width: 16em;\n    padding: 0.5em;\n  }\n</style>",
    "\n<script>\n  import { LayerCake, Svg, Html, calcExtents, uniques, flatten } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n\n  import csvData from '../data/deaths_relative_to_peak.csv';\n\n  import Legend from \"../components/Legend.svelte\";\n  import MultiLine from \"../components/MultiLine.svelte\";\n  import AxisX from \"../components/CustomAxisX.svelte\";\n  import AxisY from \"../components/AxisY.svelte\";\n  import SharedTooltip from '../components/SharedTooltip.svelte';\n\n  export let data = [];\n  export let padding = { top: 20, right: 16, bottom: 20, left: 36 };\n  export let xTicks = 7;\n  export let annotations = [];\n  export let withArea = false;\n\n  let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n  const colorScale = {\n    \"BRA\": seriesColors[2],\n    \"CAN\": \"#ccc\",\n    \"CHN\": seriesColors[4],\n    \"DEU\": \"#ccc\",\n    \"ESP\": \"#ccc\",\n    \"FRA\": \"#ccc\",\n    \"GBR\": seriesColors[0],\n    \"IND\": \"#ccc\",\n    \"ITA\": seriesColors[3],\n    \"JPN\": \"#ccc\",\n    \"KOR\": \"#ccc\",\n    \"RUS\": \"#ccc\",\n    \"SWE\": \"#ccc\",\n    \"USA\": seriesColors[1]};\n  const parseDate = timeParse('%Y-%m-%d');\n\n  const ctryLookup = {\n    BRA: \"Brazil\",\n    CHN: \"China\",\n    GBR: \"UK\",\n    USA: \"USA\",\n    ITA: \"Italy\"\n  }\n\n  const countries = uniques(csvData.map(d => d.CountryCode).filter(d => d !== \"ESP\"))\n  const formattedData = countries.map(e => {\n    return { \n      key: e,\n      sort: colorScale[e] !== \"#ccc\" ? 1 : 0,\n      values: csvData.filter(d => d.CountryCode === e)\n      .map(d => ({\n        key: +d.days_since_peak,\n        value: +d.indexed_seven_day_average,\n      })).filter(d => d.key < 90 && d.key > -90)\n      }\n  }).sort((a, b) => a.sort - b.sort);\n\n  const tooltipData = csvData.map(d => {\n    return {\n    key: d.days_since_peak,\n    value: d.indexed_seven_day_average,\n  }});\n</script>\n\n<Legend />\n<div class=\"chart-container\">\n  <LayerCake\n    {padding}\n    x={d => d.key}\n    y={d => +d.value}\n    yDomain={[0, null]}\n    xDomain={[-90, 90]}\n    data={formattedData}\n    flatData={flatten(formattedData.map(d => d.values))}>\n    <Svg>\n      <AxisX\n        gridlines={false}\n        overrideMiddle={\"Peak\"} />\n      <AxisY tickNumber={4} gridlines={true} suffix=\"%\" />\n      <MultiLine {colorScale} {annotations} />\n    </Svg>\n    <Html>\n      <SharedTooltip\n        title={\"Percentage of peak\"}\n        dataset={tooltipData}\n        highlight={[\"BRA\",\"CHN\",\"GBR\",\"ITA\",\"USA\"]}\n        unit = {\"%\"}\n        formatKey={d => ctryLookup[d]}\n      />\n    </Html>\n  </LayerCake>\n</div>\n\n<style>\n  .chart-container{\n    width: 100%;\n    height: 25em;\n  }\n\n  @media (max-width: 500px) {\n    .chart-container{\n      height: 15em;\n    }\n  }\n</style>",
    "<script>\n  import { getContext } from 'svelte';\n  import { LayerCake, Svg, calcExtents } from 'layercake';\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n  import { tweened } from 'svelte/motion';\n  import * as eases from 'svelte/easing';\n\n  import AxisAnnotation from '../components/AxisAnnotation.svelte';\n  import AxisX from \"../components/CustomAxisX.svelte\";\n  import AxisY from '../components/AxisY.svelte';\n  import ScatterLollipop from '../components/ScatterLollipop.svelte';\n  import ScatterSvg from '../components/ScatterSvg.svelte';\n  import Legend from '../components/Legend.svelte';\n  import OptionBar from './optionBar.svelte';\n\n  export let data = [];\n  export let padding = { top: 16, right: 20, bottom: 20, left: 30 };\n  export let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n  export let xTicks = 6;\n  export let yTicks = 4;\n  export let formatTick = format(\",.0f\");\n  export let yKey = 'country';\n  export let xKey = Object.keys(data[0]).filter(d => d !== yKey);\n  export let yAxisLabel = \"\";\n\n  const mode = typeof(xKey) !== \"string\" ? \"lollipop\" : \"scatter\"\n  const yDomain = mode === \"lollipop\" ? data.map(d => d[yKey]).filter( onlyUnique ).sort((a, b) => a - b) : [0,50];\n  const yScale = mode === \"lollipop\" ? scaleBand().paddingInner([0.05]).round(true) : undefined;\n  const xDomain = mode === \"lollipop\" ? [-75,75] : [-25, 25];\n\n  let searchTerm = mode === \"lollipop\" ? xKey : xKey[0];\n  const tweenOptions = {\n    duration: 1000,\n    easing: eases.cubicInOut\n  };\n\n  function filterMessage(event) {\n    searchTerm = event.detail;\n  }\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  $: searchTerm = mode === \"lollipop\" ? xKey[0] : xKey;\n  $: chartData = data.map(d => ({\n    ...d,\n    value: +d[searchTerm]\n  })).filter(d => !isNaN(d.value))\n\n</script>\n\n{#if mode === \"lollipop\"}\n  <OptionBar \n    fields={xKey}\n    {searchTerm}\n    on:message={filterMessage}\n  />\n{:else}\n  <Legend />\n{/if}\n\n<div class=\"chart-container\">\n\n  <LayerCake\n    {padding}\n    x={'value'}\n    y={d => d[yKey]}\n    yDomain={yDomain}\n    yScale={yScale}\n    xDomain={xDomain}\n    data={chartData} >\n    <Svg>\n      <AxisX\n        ticks={xTicks}\n        gridlines={true}\n        overrideMiddle={\"10th death\"}\n        showTick={mode === \"lollipop\" ? 60 : 20}\n        {formatTick} />\n      <AxisY ticks={yTicks} gridlines={mode === \"lollipop\" ? false : true} />\n      {#if yAxisLabel !== \"\"}<AxisAnnotation type=\"y\" label={yAxisLabel} />{/if}\n      {#if mode === \"lollipop\"}\n        <ScatterLollipop selectedKey={searchTerm} />\n      {:else}\n        <ScatterSvg selectedKey={searchTerm}  />\n      {/if}\n    </Svg>\n\n  </LayerCake>\n</div>\n\n<style>\n  .chart-container{\n    width: 100%;\n    height: 25em;\n  }\n\n  @media (max-width: 500px) {\n    .chart-container{\n      height: 15em;\n    }\n  }\n</style>",
    "<script>\n  import { LayerCake, Svg, calcExtents, flatten } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n  import { tweened } from 'svelte/motion';\n  import * as eases from 'svelte/easing';\n\n  import LineChart from \"./line_chart.svelte\";\n\n  export let data = []; \n  export let order = [];\n  export let padding = { top: 20, right: 16, bottom: 20, left: 36 };\n  export let xTicks = 1;\n  export let yTicks = 3;\n  export let xField = \"date\";\n  export let formatTickX = undefined;\n  export let xDomain = \"auto\";\n  export let toggles = false;\n\n  const tweenOptions = {\n    duration: 1000,\n    easing: eases.cubicInOut\n  };\n\n  const parseDate = timeParse('%Y-%m-%d');\n  const countries = data.map(d => d.country).filter( onlyUnique );\n  const countryLabels = data.map(d => d.title ? d.title : d.country).filter( onlyUnique );\n  const toggleOptions = toggles ? [[\"Deaths \",\"Cases \"],[\"Per million\",\"Raw number\"]] : [];\n  let toggleSelection = toggles ? [toggleOptions[0][0].toLowerCase(),toggleOptions[1][0].toLowerCase()] : undefined;\n\n  const extentGetters = [\n    { field: 'x', accessor: d => d[xField] },\n    { field: 'y', accessor: d => d.value }\n  ];\n\n  let formattedData = (order.length > 0 ? order : countries).map(e => {\n    const filtered = data.filter(d => d.country === e);\n    return {\n     label: filtered[0].title ? filtered[0].title : filtered[0].country,\n     values: filtered.map(f => ({\n        ...f,\n        date: parseDate(f.date),\n        value: toggleSelection ? +f[toggleSelection[0]+toggleSelection[1]] : +f.value\n      }))}\n  })\n\n  let fullExtents = calcExtents(flatten(formattedData.map(d => d.values)), extentGetters);\n\n  let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n\tconst colorScale = {\n    \"BRA\": seriesColors[2],\n    \"CAN\": \"#8399A8\",\n    \"CHN\": seriesColors[4],\n    \"DEU\": \"#8399A8\",\n    \"ESP\": \"#8399A8\",\n    \"FRA\": \"#8399A8\",\n    \"GBR\": seriesColors[0],\n    \"IND\": \"#8399A8\",\n    \"ITA\": seriesColors[3],\n    \"JPN\": \"#8399A8\",\n    \"KOR\": \"#8399A8\",\n    \"RUS\": \"#8399A8\",\n    \"SWE\": \"#8399A8\",\n    \"USA\": seriesColors[1]};\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function changeToggleSelection(option,index){\n    toggleSelection[index] = option.toLowerCase();\n  }\n\n  function setTween(selection) {\n    tweenedPath.set((order.length > 0 ? order : countries).map(e => {\n      const filtered = data.filter(d => d.country === e);\n      return {\n       label: filtered[0].title ? filtered[0].title : filtered[0].country,\n       values: filtered.map(f => ({\n          ...f,\n          date: parseDate(f.date),\n          value: selection ? +f[selection[0]+selection[1]] : +f.value\n        }))}\n    }))\n  }\n\n  function setTweenExtents(fData) {\n    tweenedExtent.set(calcExtents(flatten(fData.map(d => d.values)), extentGetters))\n  }\n\n  $: tweenedPath = tweened(formattedData, tweenOptions);\n  $: tweenedExtent = tweened(fullExtents, tweenOptions);\n  $: setTween(toggleSelection);\n  $: formattedData2 = (order.length > 0 ? order : countries).map(e => {\n    const filtered = data.filter(d => d.country === e);\n    return {\n     label: filtered[0].title ? filtered[0].title : filtered[0].country,\n     values: filtered.map(f => ({\n        ...f,\n        date: parseDate(f.date),\n        value: toggleSelection ? +f[toggleSelection[0]+toggleSelection[1]] : +f.value\n      }))}\n  })\n  $: setTweenExtents(formattedData2);\n\n</script>\n  \n  {#if toggles}\n    <div class=\"button-container\">\n      <div class=\"toggleSelection0\">\n      {#each toggleOptions[0] as d,i}\n        <button\n          class=\"{toggleSelection[0] === d.toLowerCase() ? \"selected\" : \"\"}\"\n          on:click=\"{() => changeToggleSelection(d,0)}\"\n        >{d}</button>\n        {#if i < toggleOptions[0].length-1}\n          <span>/</span>\n        {/if}\n      {/each}\n      </div>\n    \n      <div class=\"toggleSelection1\">\n      {#each toggleOptions[1] as d,i}\n        <button\n          class=\"{toggleSelection[1] === d.toLowerCase() ? \"selected\" : \"\"}\"\n          on:click=\"{() => changeToggleSelection(d,1)}\"\n        >{d}</button>\n        {#if i < toggleOptions[1].length-1}\n          <span>/</span>\n        {/if}\n      {/each}\n      </div>\n    </div>\n  {/if}\n  <div class=\"small-multiple-container\">\n    {#each (order.length > 0 ? order : countries) as country, i}\n      <div class=\"small-multiple\">\n        <h5>{$tweenedPath[i].label}</h5>\n        <LineChart\n          {padding}\n          {xTicks}\n          {yTicks}\n          {xField}\n          xDomain={xDomain === \"auto\" ? fullExtents.x : xDomain}\n          {formatTickX}\n          yDomain={$tweenedExtent.y}\n          stroke={colorScale[country]}\n          data={$tweenedPath[i].values}\n          isSmallMultiple={true}\n          showAnnotation={!toggles && i === 0} />\n      </div>\n    {/each}\n  </div>\n\n<style>\n\n  .small-multiple-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));\n  }\n\n  .small-multiple {\n    box-sizing: border-box;\n    margin: 8px;\n  }\n\n  .button-container {\n    display: inline-flex;\n  }\n\n  .toggleSelection1 {\n    margin-left: 2em;\n  }\n\n  .selected{\n    background-color: #c1002a;\n    color: #fff;\n  }\n</style>",
    "<script>\n  import { LayerCake, Svg } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n\n  import MultiLineChart from \"./multiline_chart.svelte\";\n\n  export let data = [];\n  export let order = [];\n  export let padding = { top: 20, right: 16, bottom: 20, left: 36 };\n  export let yDomain = [0, null];\n  export let xTicks = 2;\n  export let yTicks = 2;\n  export let ticks = null;\n  export let withArea = false;\n\n  let seriesColors = [\"#E60032\",\"#0063E6\",\"#E6C800\",\"#E67800\",\"#00E682\"];\n\tconst colorLookup = {\n    \"Brazil\": seriesColors[2],\n    \"CAN\": \"#8399A8\",\n    \"CHN\": seriesColors[4],\n    \"Germany\": \"#8399A8\",\n    \"Spain\": \"#8399A8\",\n    \"France\": \"#8399A8\",\n    \"UK\": seriesColors[0],\n    \"IND\": \"#8399A8\",\n    \"Italy\": seriesColors[3],\n    \"JPN\": \"#8399A8\",\n    \"KOR\": \"#8399A8\",\n    \"RUS\": \"#8399A8\",\n    \"Sweden\": \"#8399A8\",\n    \"US\": seriesColors[1]};\n\n  const colorScale = (country) => {\n    return {expected_deaths: \"#ccc\", deaths: colorLookup[country]}\n  };\n  const parseDate = timeParse('%Y-%m-%d');\n\n/*\n  country\n    key: keyField\n    values: [date, value]\n*/\n\n  const keyFields = [\"expected_deaths\",\"deaths\"];\n  const countries = data.map(d => d.country).filter( onlyUnique );\n  const countryLabels = data.map(d => d.label ? d.label : d.country).filter( onlyUnique );\n  const formattedData = (order.length > 0 ? order : countries).map(e => {\n    let buffer = []\n    for (let keyField of keyFields){\n      buffer.push({\n        key: keyField,\n        country: e,\n        excess_percentage: \"(+\"+(data.filter(d => d.country === e)[0].excess_percentage-100)+\"%)\",\n        values: data.filter(d => d.country === e)\n          .map(d => ({\n            date: parseDate(d.date),\n            value: d[keyField]\n          })\n        )}\n      )}\n    return buffer \n  });\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n</script>\n\n  <div class=\"small-multiple-container\">\n    {#each (order.length > 0 ? order : countries) as country, i}\n      <div class=\"small-multiple\">\n        <h5>{(order.length > 0 ? order : countries)[i]}</h5>\n        <h5 class=\"percentage\">{formattedData[i][0].excess_percentage}</h5>\n        <MultiLineChart\n          {padding}\n          {xTicks}\n          {yTicks}\n          yDomain={[0, 80000]}\n          colorScale={colorScale(country)}\n          {withArea}\n          isSmallMultiple={true}\n          data={formattedData[i]} />\n      </div>\n    {/each}\n  </div>\n\n<style>\n  .small-multiple-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n  }\n\n  @media(min-width: 700px) {\n    .small-multiple-container {\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    }\n  }\n\n  .small-multiple {\n    box-sizing: border-box;\n    margin: 8px;\n  }\n\n  h5 {\n    display: inline-flex\n  }\n  .percentage {\n    margin-left: 0em;\n  }\n  \n</style>",
    "<script>\n  import { LayerCake, Svg, calcExtents } from \"layercake\";\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n\n  import Bar from '../components/Bar.svelte';\n  import AxisX from '../components/CustomAxisX.svelte';\n  import AxisY from '../components/AxisY.svelte';\n  import TextureLegend from '../components/TextureLegend.svelte'\n\n  export let yDomain = [0, null];\n  export let data = [];\n  export let yField = \"value\";\n  export let yTitle = \"\";\n  export let ySuffix = \"\";\n  export let yKey = \"GBR\";\n  export let formatTickY = d => d + ySuffix;\n  export let labelPrecision;\n\n  const categories = data.map(d => d.category).filter( onlyUnique );\n  let chartData = data.map(d => ({\n    key: d.country,\n    value: +d[yField],\n    category: categories.indexOf(d.category)\n  })).filter(d => !isNaN(d.value));\n\n  const countries = chartData.map(d => d.key);\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n</script>\n\n  <TextureLegend legendNames={categories}/>\n  <div class=\"chart-container\">\n    <LayerCake\n        padding={{ top: 10, right: 10, bottom: 20, left: 40 }}\n        y='key'\n        x='value'\n        yScale={scaleBand().paddingInner([0.33]).round(true)}\n        yDomain={countries}\n        xDomain={yDomain}\n        data={chartData}\n      >\n\n      <Svg>\n        <AxisX\n          ticks={4}\n          gridlines={true}\n          {yKey}\n          overrideMiddle=\"10th death\"\n        />\n        <AxisY\n          gridlines={false}\n          formatTick={formatTickY}\n        />\n        <Bar {labelPrecision} fill=\"#aedeee\" withTexture={true} {yKey}/>\n      </Svg>\n    </LayerCake>\n  </div>\n\n<style>\n  .chart-container{\n    width: 100%;\n    height: 25em;\n  }\n\n  @media (max-width: 500px) {\n    .chart-container{\n      height: 15em;\n    }\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}
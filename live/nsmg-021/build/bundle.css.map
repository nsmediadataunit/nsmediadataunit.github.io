{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../LayerCake.svelte",
    "../../Html.svelte",
    "../../ScaledSvg.svelte",
    "../../Svg.svelte",
    "../../App.svelte",
    "../../AxisX.svelte",
    "../../AxisY.svelte",
    "../../GroupedBar.svelte",
    "../../PeakMap.svelte",
    "../../VoronoiMap.svelte",
    "../../bar_chart.svelte",
    "../../map.svelte",
    "../../search_table.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\n  import { onMount } from 'svelte';\n\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { format } from \"d3-format\";\n  const numFormat = format(\",.0f\");\n  const dateParse = timeParse(\"%Y-%m-%d\");\n  const dateFormat = timeFormat(\"%b %-d\");\n\n  import BarChart from \"./graphics/bar_chart.svelte\";\n  import Map from \"./graphics/map.svelte\";\n\n  export let pymChild = {};\n  export let styleNs = false; // serif or san-serif;\n  export let title = \"NSMG-000\";\n\n\tonMount(() => {\n\t\t\tpymChild.sendHeight();\n  });\n\n</script>\n\n<svelte:head>\n  <title>{title}</title>\n  <link\n  href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700&display=swap\"\n  rel=\"stylesheet\" />\n</svelte:head>\n\n<div class=\"embed-container\" class:styleNs>\n  <BarChart {pymChild} />\n</div>\n\n<style>\n  @font-face {\n    font-family: \"Unit OT\";\n    src: url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.eot?#iefix\") format(\"embedded-opentype\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.woff\") format(\"woff\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.ttf\") format(\"truetype\"), url(\"/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.svg#unitotregular\") format(\"svg\");\n    font-style: normal;\n    font-weight: normal;\n  }\n\n  .embed-container {\n    width: 100%;\n    padding: 8px;\n    box-sizing: border-box;\n  }\n\n  :global(.chart-container) {\n    width: 100%;\n    padding: 8px;\n    border-top: 1px solid black;\n    border-bottom: 1px solid black;\n    box-sizing: border-box;\n    margin-bottom: 8px;\n    font-family: Source Sans Pro, sans-serif;\n  }\n\n  :global(.source-text) {\n    color: #607a8a;\n    margin: 8px 0;\n    font-size: 0.75em;\n    font-family: \"Unit OT\", Source Sans Pro, sans-serif;\n\t}\n\t\n\t:global(button) {\n\t\tmargin: 4px;\n\t}\n\n  :global(h3),\n  :global(h5) {\n\t\tmargin: 0 0 0.25em 0;\n\t\tpadding: 0;\n    font-family: \"Unit OT\", Source Sans Pro, sans-serif;\n  }\n  \n  :global(h4) {\n\t\tmargin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-family: \"Unit OT\", Source Sans Pro, sans-serif;\n  }\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks($width < 600 ? 2 : ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n\texport let ticks = 4;\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let xTick = 0;\n\texport let yTick = 0;\n\texport let dxTick = 0;\n\texport let dyTick = -4;\n\texport let textAnchor = 'start';\n\texport let hours = [];\n\n\tconsole.log(hours);\n\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$yScale.domain() :\n\t\t\t$yScale.ticks(ticks);\n</script>\n\n<text\n\tx='-17.5'\n\ty='-5'\n\ttext-anchor=\"middle\"\n>Time (hours)</text>\n\n<g class='axis y-axis' transform='translate({-$padding.left - 40}, 0)'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line\n\t\t\t\t\tx2='100%'\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx='{xTick}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n\t\t\t\tdx='{isBandwidth ? -5 : dxTick}'\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n\t\t\t>{formatTick(tick)}</text>\n\n\t\t\t<rect\n\t\t\t\tx='{xTick + 20 - 2.5}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0) - 14}'\n\t\t\t\twidth=\"5\"\n\t\t\t\theight=\"2\"\n\t\t\t/>\n\t\t\t<circle r={12} \n\t\t\t\tcx='{xTick + 20}'\n\t\t\t\tcy='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}' >\n\t\t\t</circle>\n\t\t\t<text\n\t\t\t\tx='{xTick + 25}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n\t\t\t\tdx='{isBandwidth ? -5 : dxTick}'\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\n\t\t\t\tstyle=\"text-anchor:middle;\"\n\t\t\t>{hours[i] || \"-\"}</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\ttext {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\t.tick line {\n\t\tstroke: #aaa;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n\n\tcircle {\n\t\tfill: none;\n\t\tstroke: #222;\n\t\tstroke-width: 1.25px;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');\n  \n  export let fill = [\"#00bbff\"];\n</script>\n\n{#each $data as e, i}\n<g class=\"bar-group\">\n\t{#each e as d, j}\n\t\t<rect\n\t\t\tclass='group-rect'\n\t\t\tdata-id=\"{j}\"\n\t\t\tx=\"{$xScale.range()[0]}\"\n\t\t\ty=\"{$yGet(d) + ($yScale.bandwidth() / $data.length) * i}\"\n\t\t\theight={$yScale.bandwidth() / $data.length}\n\t\t\twidth=\"{$xGet(d)}\"\n      fill={fill[i]}\n\t\t></rect>\n\t{#if d.annotation}\n\t\t<text\n\t\t\tx=\"{$xScale.range()[0] + 2}\"\n\t\t\ty=\"{$yGet(d) + ($yScale.bandwidth() / $data.length) * 2 - 4}\"\n\t\t>\n\t\t{d.annotation}\n\t\t</text>\n\t{/if}\n\t{/each}\n</g>\n{/each}\n\n<style>\n\ttext {\n\t\tfont-size: 0.725rem;\n\t\tfill: #222;\n\t}\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\timport * as geo from 'd3-geo';\n\timport { scaleLinear } from 'd3-scale';\n  import { format } from \"d3-format\";\n\n\tconst { data, custom, width, height } = getContext('LayerCake');\n\n\texport let projectionName = 'geoAlbersUsa';\n\texport let selectedLayer = \"\";\n\texport let selectedType = \"\";\n\texport let range = [];\n\texport let domain = [];\n\n\t$: layerData = $custom.layerData;\n\n\t$: peakScale = scaleLinear()\n\t\t.range(range)\n\t\t.domain(domain)\n\n\t$: projection = geo[projectionName]()\n\t\t.fitSize([$width, $height], $data);\n\n\t$: geoPath = geo.geoPath(projection);\n\n\t$: path = (d) => {\n\t\treturn 'M' + d\n\t\t.map(d => {\n\t\t\treturn d.x + ',' + d.y;\n\t\t})\n\t\t.join('L');\n\t}\n\n\t$: layerFiltered = layerData.map(d => {\n\t\t\tlet field = \"total\";\n\n\t\t\tif(selectedType === \"total\") {\n\t\t\t\tfield = \"total\";\n\t\t\t}\n\t\t\tif(selectedType === \"week\") {\n\t\t\t\tfield = \"lastWeek\";\n\t\t\t}\n\t\t\tif(selectedLayer === \"excess\") {\n\t\t\t\tfield = \"Avg excess deaths between week 12 - 17\";\n\t\t\t}\n\t\t\tif(selectedLayer === \"care\") {\n\t\t\t\tfield = \"% of care homes that are infected\";\n\t\t\t}\n\n\t\t\tlet value = d.value;\n\n\t\t\tif(selectedLayer === \"pop\")\n\t\t\t\tvalue = (+d[field] / d.population * 100000).toFixed(1)\n\n\t\t\tconst peakWidth = $width * 0.01; // 5\n\n\t\t\tconst point = projection([d.lon,d.lat]);\n\t\t\tconst peak = [\n\t\t\t\t{x: point[0] - peakWidth, y: point[1] },\n\t\t\t\t{x: point[0], y: point[1] - peakScale(value) },\n\t\t\t\t{x: point[0] + peakWidth, y: point[1] }\n\t\t\t];\n\n\t\t\treturn {\n\t\t\t\tdata: peak,\n\t\t\t\tregion: d[\"areaName\"],\n\t\t\t\tvalue,\n\t\t\t\tignore: d[field] === \"\",\n\t\t\t};\n\t\t}).filter(d => d.ignore !== true);\n\n\t\t$: legend = [1, 2, 4, 8].map((d, i) => {\n\t\t\tconst scaleDomain = domain;\n\t\t\tconst point = [$width - 50 - (i * 40), $height - 20];\n\t\t\tconst value = scaleDomain[1] / d;\n\t\t\tconst peakWidth = $width * 0.01; // 5\n\n\t\t\treturn {\n\t\t\t\tx: point[0],\n\t\t\t\ty: point[1],\n\t\t\t\tdata: [\n\t\t\t\t\t{x: point[0] - peakWidth, y: point[1] },\n\t\t\t\t\t{x: point[0], y: point[1] - peakScale(value) },\n\t\t\t\t\t{x: point[0] + peakWidth, y: point[1] }\n\t\t\t\t],\n\t\t\t\tvalue,\n\t\t\t}\n\t\t})\n\n\n</script>\n\n<g class=\"vis-group\">\n\t{#each layerFiltered as peak}\n\t\t<path\n\t\t\tclass=\"peak\"\n\t\t\tfill=\"#fff\"\n\t\t\td=\"{path(peak.data)}\"\n\t\t>\n\t\t<title>{peak.region} - {peak.value}</title>\n\t\t</path>\n\t{/each}\n</g>\n<g class=\"vis-legend\">\n\t{#each legend as item}\n\t\t<path\n\t\t\tclass=\"peak\"\n\t\t\tfill=\"#fff\"\n\t\t\td=\"{path(item.data)}\"\n\t\t>\n\t\t</path>\n\t\t<text x={item.x} y={item.y + 12}>{format(\",\")(item.value)}</text>\n\t{/each}\n</g>\n\n<style>\n\tpath.peak {\n\t\tstroke: #222;\n\t\tfill-opacity: 0.01;\n\t}\n\n\ttext {\n\t\tfont-size: 0.75em;\n\t\ttext-anchor: middle;\n\t}\n</style>\n",
    "<script>\n\timport { Delaunay } from 'd3-delaunay';\n\timport { getContext } from 'svelte';\n\timport * as geo from 'd3-geo';\n\timport { uniques, Svg } from 'layercake';\n  import { format } from \"d3-format\";\n  const numFormat = format(\",.0f\");\n\tconst { data, custom, xGet, yGet, width, height } = getContext('LayerCake');\n\texport let projectionName = 'geoAlbersUsa';\n\texport let fields = [\n\t\t\t{key: \"Area\", value: \"areaName\"},\n\t\t\t{key: \"Total cases\", value: \"total\"},\n\t\t\t{key: \"Last week\", value: \"lastWeek\"},\n\t\t\t{key: \"Population\", value: \"population\"}\n\t];\n\tlet tooltipX = 0;\n\tlet tooltipY = 0;\n\tlet tooltipContent = {};\n\tfunction enter (point) {\n\t\ttooltipContent = point.data;\n\t\ttooltipX = point[0];\n\t\ttooltipY = point[1] + 20;\n\t\tvisible = true;\n\t}\n\tfunction exit (point) {\n\t\tvisible = false;\n\t\ttooltipContent = {};\n\t}\n\tlet visible = false;\n\t$: layerData = $custom.layerData;\n\t$: projection = geo[projectionName]()\n\t\t.fitSize([$width, $height], $data);\n\t$: points = layerData.map(d => {\n\t\tconst point = projection([d.lon, d.lat]);\n\t\tpoint.data = d;\n\t\treturn point;\n\t});\n\t$: uniquePoints = uniques(points, d => d.join(), false);\n\t$: voronoi = Delaunay.from(points).voronoi([0, 0, $width, $height]);\n\tfunction setContents(result) {\n    if (Object.keys(result).length === 0) return '';\n    const rows = fields.map(d => ({\n\t\t\tkey: d.key,\n\t\t\tvalue: result[d.value]\n\t\t}));\n    return `\n\t\t\t${rows.map((row, i) => `<div transform=\"translate(0, ${i * 30})\">\n\t\t\t<span style=\"color: #999; width: 85px;\">${row.key}:</span> \n\t\t\t<span>${i > 0 ? numFormat(row.value) : row.value}</span></div>`).join('')}`;\n  }\n</script>\n\n<style>\n\t.voronoi-cell {\n\t\tfill: none;\n\t\tstroke: none;\n\t\tpointer-events: all;\n\t}\n\t.tooltip {\n\t\tfont-size: 0.75em;\n    position: absolute;\n    font-size: 13px;\n    pointer-events: none;\n    border: 1px solid #ccc;\n    background: rgba(255, 255, 255, 0.85);\n    padding: 5px;\n    transition: left 250ms ease-out, top 250ms ease-out;\n\t\tz-index: 15;\n\t\ttop: 16px;\n\t\tleft: 16px;\n\t}\n</style>\n\n<Svg>\n<g class=\"voronoi-layer\">\n\t{#each points as point, i}\n\t\t<path class=\"voronoi-cell\" d={voronoi.renderCell(i)} on:mouseenter=\"{enter(point)}\" on:mouseout=\"{exit(point)}\">\n\t\t</path>\n\t{/each}\n</Svg>\n\n<div class=\"tooltip\" style=\"display:{visible ? \"block\" : \"none\"}; top: {tooltipY}px; left: {tooltipX}px\">\n\t{@html setContents(tooltipContent)}\n</div> ",
    "<script>\n  import { LayerCake, Html, Svg, uniques, flatten } from 'layercake';\n  import { scaleBand } from 'd3-scale';\n  import { format } from 'd3-format';\n\n  import csvData from '../data/NewStatesman-EuropeRail-Table.csv';\n\n  import Bar from '../components/GroupedBar.svelte';\n  import AxisX from '../components/AxisX.svelte';\n  import AxisY from '../components/AxisY.svelte';\n  import SearchTable from \"./search_table.svelte\";\n\n  export let pymChild = {};\n\n  //route,pax,emissions,savings,time\n\n  let tableData = csvData.map(d => ({\n    route: d.route,\n    pax: format(\",.0f\")(d.pax),\n    emissions: format(\",.0f\")(d.emissions),\n    train: format(\",.0f\")(d.emissions - d.savings),\n    savings: format(\",.0f\")(d.savings),\n    time: d.time\n  }))\n\n  export let data = [\n    csvData.map(d => ({\n      key: d.route,\n      value: d.emissions - d.savings\n    })),\n    csvData.map((d, i) => ({\n      key: d.route,\n      value: +d.emissions,\n      annotation: format(\",.0f\")(d.pax) + (i === 0 ? \" passengers\" : \"\")\n    })),\n  ];\n\n  console.log(flatten(data));\n\n  const yDomain = uniques(data[0].map(d => d.key));\n</script>\n\n<style>\n  .svg-container {\n    width: 100%;\n    height: 400px;\n    min-height: 200px;\n    padding: 8px;\n  }\n\n  .inline-legend {\n    display: inline-block;\n    padding: 4px;\n    border: 1px solid #777;\n    background: #adc3d3;\n    color: #222;\n  }\n\n  .b {\n    background: #c1002a;\n    color: #fff;\n  }\n</style>\n\n  <div class=\"chart-container\">\n  <h3>Top ten rail routes with biggest carbon dioxide saving</h3>\n  <h4><span class=\"inline-legend\">Plane emissions</span> and <span class=\"inline-legend b\">train emissions</span></h4>\n  <div class=\"svg-container\">\n      <LayerCake\n        padding={{ top: 16, bottom: 16, left: 160, right: 16 }}\n        x='value'\n        y='key'\n        yScale={scaleBand().paddingInner([0.2]).round(true)}\n        {yDomain}\n        xDomain={[0, null]}\n        {data}\n        flatData={flatten(data)}\n      > \n        <Svg>\n          <AxisX\n            ticks={4}\n            gridlines={true}\n            baseline={true}\n            formatTick={d => format(\",.0f\")(d)}\n          />\n          <AxisY\n            gridlines={false}\n            baseline={true}\n            formatTick={d => d}\n            hours={csvData.map(d => d.time)}\n          />\n          <Bar fill={[\"#c1002a\", \"#adc3d3\"]} />\n        </Svg>\n      </LayerCake>\n  </div>\n  <div class=\"source-text\">\n    * - non-direct train<br>\n    Time is for train, includes check-in time and changes.<br>\n    Source: ProRail, Jon Worth</div>\n  <SearchTable\n    {pymChild}\n    headers={[\n      {key:\"route\",\n      title:\"Route\"},\n      {key:\"time\",\n      title:\"Time for train\"},\n      {key:\"pax\",\n      title:\"Number of passengers\"},\n      {key:\"emissions\",\n      title:\"Air CO2 emissions [kg]\"},\n      {key:\"train\",\n      title:\"Train CO2 emissions [kg]\"},\n      {key:\"savings\",\n      title:\"CO2 savings [kg]\"},\n    ]}\n    data={tableData}\n   />\n</div>\n",
    "<script>\n  import { LayerCake, Canvas, Svg, Html } from 'layercake';\n  import { feature } from 'topojson';\n  import { geoMercator } from 'd3-geo';\n\n  import ukGeo from '../data/uk-topo.json';\n  import engData from '../data/Local authority aggregate - subset.csv';\n\n  import MapCanvas from '../components/Map.canvas.svelte';\n  import PeakMap from '../components/PeakMap.svelte';\n  import Voronoi from '../components/VoronoiMap.svelte';\n\n  const geojson = feature(ukGeo, ukGeo.objects.uk);\n\n  $: layerData = engData.filter(d => d.areaCode[0] === \"E\").map(d => {\n      let field = \"Avg excess deaths between week 12 - 17\";\n      let value = +d[field];\n\n      return {\n        ...d,\n        value,\n      }\n  });\n</script>\n\n<style>\n  .svg-container {\n    width: 80%;\n    height: 600px;\n  }\n\n  .map-container {\n    position: relative;\n  }\n</style>\n\n  <div class=\"chart-container\">\n<h3>Placeholder title</h3>\n<h4>Placeholder subtitle</h4>\n<div class=\"map-container\">\n  <div class=\"svg-container\">\n    <LayerCake\n      data={geojson}\n      custom={{layerData: layerData}}\n    >\n      <Canvas>\n        <MapCanvas\n          projection={geoMercator}\n        />\n      </Canvas>\n      <Svg>\n        <PeakMap\n          projectionName={'geoMercator'}\n          range={[0, 40]}\n          domain={[0, 300]}\n        />\n      </Svg>\n      <Voronoi\n        projectionName={'geoMercator'}\n        fields={[\n          {key: \"Area\", value: \"areaName\"},\n          {key: \"Excess deaths\", value: \"value\"},\n        ]}\n      />\n    </LayerCake>\n  </div>\n</div>\n<div class=\"source-text\">Source: Example source</div>\n\n  </div>",
    "<script>\n\timport { getContext, createEventDispatcher } from 'svelte';\n  import { format } from \"d3-format\";\n\n\tconst dispatch = createEventDispatcher();\n\n\tfunction setSearch() {\n    searchTerm = event.target.value;\n  \n\t\tdispatch('message', {\n\t\t\ttext: searchTerm,\n\t\t});\n\t}\n  const defNum = format(\",.0f\");\n\n  export let pymChild = {};\n  export let data = [\n    {key: \"1979\", value: 2},\n    {key: \"1983\", value: 18}\n  ];\n  export let headers = Object.keys(data[0]).map(d => ({key: d, title: d}));\n  export let sortField = \"value\";\n  export let keyField = \"key\";\n  export let keys = data.map(d => d[keyField]);\n  export let tableId = \"key-list\";\n  export let enableSearch = false;\n  export let defaultOpen = false;\n  export let searchTerm = \"\";\n  export let autoSort = true;\n  export let sliceSize = 10;\n  const sliceMid = sliceSize / 2;\n\n  function updateHeight() {\n    setTimeout(() => {\n      pymChild.sendHeight()\n    }, 50);\n  }\n\n  function doSort(b, a) {\n    if(autoSort) {\n      return b[sortField] - a[sortField]\n    }\n  }\n\n  data = data.sort(doSort);\n\n  $: searchIdx = data.map(d => d[keyField]).indexOf(searchTerm);\n  $: filteredData = (searchTerm === \"\" || searchIdx < sliceMid) ? data.slice(0, sliceSize) : data.slice(searchIdx - sliceMid, searchIdx + sliceMid);\n</script>\n\n<details on:click={() => updateHeight()} open={defaultOpen === true ? 'open' : ''}>\n<summary style=\"{defaultOpen === true ? \"display: none;\" : \"\"}\"><span>See table</span></summary>\n{#if enableSearch}\n<input bind:value={searchTerm} on:change={(evt) => setSearch(evt)} list=\"{tableId}\"><button on:click={() => (searchTerm = \"\")}>Clear</button>\n<datalist id=\"{tableId}\">\n  {#each keys as key}\n    <option value=\"{key}\">{key}</option>\n  {/each}\n</datalist>\n{/if}\n<table>\n  <thead>\n    <tr>\n      {#each headers as header}\n      <td class={header.type === \"number\" || header.key === \"value\" ? \"number\" : \"\"}>{header.title}</td>\n      {/each}\n    </tr>\n  </thead>\n  {#each filteredData.sort(doSort) as row}\n    <tr class=\"{row[keyField] === searchTerm ? \"bold\" : \"\"}\">\n      {#each headers as header}\n        <td class={header.type === \"number\" || header.key === \"value\" ? \"number\" : \"\"}>\n          {#if row[header.key] === \"null\"}\n            No data\n          {/if}\n          {#if row[header.key] !== \"null\"}\n            {(header.type === \"number\") ? defNum(row[header.key]) : row[header.key]}\n          {/if}\n        </td>\n      {/each}\n    </tr>\n  {/each}\n</table>\n</details>\n\n<style>\n  table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n\n  tr:nth-child(odd) {\n    background: #e7efff;\n  }\n\n  thead {\n    font-weight: bold;\n  }\n\n  td {\n    padding: 2px 4px;\n    max-width: 25%;\n  }\n\n  .bold {\n    font-weight: bold;\n  }\n\n  .number {\n    text-align: right;\n  }\n\n  summary {    \n    width: max-content;\n    border: 1px solid #333;\n    background-color: #f4f4f4;\n    padding: 0 4px;\n  }\n  span {\n    padding: 4px;\n    display: inline-block;\n  }\n\n  details {\n    position: relative;\n    top: -30px;\n  }\n\n  summary {\n    float: right;\n  }\n\n  @media (max-width: 600px) {\n    summary {\n      float: none;\n    }\n\n    details {\n      top: 0;\n    }\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}
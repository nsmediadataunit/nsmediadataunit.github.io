{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../results_panel.svelte",
    "../../flat.svelte",
    "../../field.svelte",
    "../../house.svelte",
    "../../track.svelte",
    "../../Toggle.svelte",
    "../../bar.svelte",
    "../../AxisX.svelte",
    "../../track_container.svelte",
    "../../Html.svelte",
    "../../Svg.svelte",
    "../../LayerCake.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { afterUpdate } from 'svelte';\n  import { format } from \"d3-format\";\n  const numFormat = format(\",.0f\");\n  const dateParse = timeParse(\"%Y-%m-%d\");\n  const dateFormat = timeFormat(\"%b %d\");\n\n\texport let pymChild = {};\n\n\tafterUpdate(() => {\n\t\t\tpymChild.sendHeight();\n  });\n  \n  import ResultsPanel from \"./graphics/results_panel.svelte\";\n  $: postcodeResult = null;\n\n  let postcode = \"\";\n  let resultsData = { selectedDistrict: \"\" };\n  const styleNs = true;\n\n\n  let errorMsg = \"\";\n\n  function processPostcode(postcode) {\n    let processedCode = postcode;\n    //regex here:\n    if(postcode.length > 7) {\n      processedCode = processedCode.replace(\" \", \"\");\n    }\n    if(postcode.length === 6) {\n      processedCode = processedCode.slice(0, 3) + \" \" + processedCode.slice(3);\n    }\n    if(postcode.length === 5) {\n      processedCode = processedCode.slice(0, 2) + \"  \" + processedCode.slice(2);\n    }\n    return processedCode.toUpperCase();\n  }\n\n  function handleEnter() {\n    if (event.key === 'Enter') {\n      submitPostcode();\n    }\n  }\n\n  function submitPostcode() {\n    //TODO: sanitise input + format correctly\n    if(postcode !== \"\" && postcode.length > 4) {\n      errorMsg = \"Loading...\";\n      postcodeResult = null;\n      fetch(\"https://9ornsrwb3m.execute-api.us-east-2.amazonaws.com/postcode-search\", {\n          method: 'POST',\n          body: JSON.stringify({\"postcode\": processPostcode(postcode)})\n        })\n        .then(response => response.json())\n        .then(json => {\n          if(json.error || json.codes.country === \"W92000004\") {\n            errorMsg = \"Please enter a valid postcode in England.\";\n          }\n          else {\n            postcodeResult = json;\n            errorMsg = \"\";\n          }\n        })\n    }\n    else if(postcode.length > 1) {\n      errorMsg = \"Please enter a full postcode.\";\n      postcodeResult = null;\n    }\n    else {\n      errorMsg = \"Please enter a valid postcode in England.\";\n      postcodeResult = null;\n    }\n  }\n</script>\n\n<style>\n  @font-face {\n    font-family: \"Unit OT\";\n    src: url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.eot?#iefix\") format(\"embedded-opentype\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.woff\") format(\"woff\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.ttf\") format(\"truetype\"), url(\"/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.svg#unitotregular\") format(\"svg\");\n    font-style: normal;\n    font-weight: normal;\n  }\n\n  @font-face {\n    font-family: \"Unit Slab\";\n    src: url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitslabpro-bold-webfont.eot?#iefix\") format(\"embedded-opentype\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitslabpro-bold-webfont.woff\") format(\"woff\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitslabpro-bold-webfont.ttf\") format(\"truetype\"), url(\"/sites/all/themes/creative-responsive-theme/fonts/unitslabpro-bold-webfont.svg#unit_slab_probold\") format(\"svg\");\n    font-style: normal;\n    font-weight: normal;\n  }\n\n  .report-container {\n    min-width: 280px;\n    max-width: 900px;\n    width: 95%;\n    min-height: 100%;\n    margin: 0 auto;\n    padding: 0 4px;\n    font-family: \"Unit OT\", sans-serif;\n    border-top: 1px solid black;\n    border-bottom: 1px solid black;\n    padding-bottom: 8px;\n    margin-bottom: 8px;\n  }\n\n  :global(.chart-container) {\n    width: 100%;\n    height: 200px;\n    padding: 8px;\n  }\n\n  :global(.source-text) {\n    color: #607a8a;\n    margin: 8px 0;\n    font-size: 0.75em;\n\t}\n\t\n\t:global(button) {\n\t\tmargin: 4px;\n\t}\n\n\t.clear {\n\t\tclear: both;\n\t}\n\n  :global(h2),\n  :global(h3),\n  :global(h4),\n  :global(h5) {\n\t\tmargin: 0;\n    padding: 0;\n    font-family: \"Unit Slab\", serif;\n  }\n\n  :global(h2),\n  :global(h4) {\n    margin-top: 1em;\n  }\n  \n  a {\n    color: #0054c1;\n  }\n\n  hr {\n    margin-top: 60px;\n  }\n\n</style>\n\n<!-- <link\n  href=\"https://fonts.googleapis.com/css?family=Merriweather:400,700&display=swap\"\n  rel=\"stylesheet\" /> -->\n<link href=\"https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap\" rel=\"stylesheet\"> \n<div class=\"report-container\" class:styleNs>\n  <div class=\"header\">\n    <h2 id=\"page-nav\">Green space in your area</h2>\n    <label for=\"postcode-search\">Enter your postcode:</label>\n    <input bind:value={postcode} id=\"postcode-search\" on:keypress={() => handleEnter()} />\n    <button on:click={() => submitPostcode()}>Submit</button>\n    <p>{errorMsg}</p>\n    {#if postcodeResult && !postcodeResult.error}\n    <ResultsPanel codes={postcodeResult.codes} data={postcodeResult.data} />\n    {/if}\n  </div>\n</div>\n",
    "<script>\n  import { LayerCake, Svg, flatten } from \"layercake\";\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { format } from \"d3-format\";\n  import { scaleTime } from \"d3-scale\";\n  import { csvParse } from \"d3-dsv\";\n\n  const defNum = format(\",.1f\");\n\n  import Flats from \"./flat.svelte\";\n  import House from \"./house.svelte\";\n  import Field from \"./field.svelte\";\n  import Track from \"./track.svelte\";\n  import Toggle from \"./Toggle.svelte\";\n  import Bar from \"./bar.svelte\";\n  import Bar2 from \"./track.svelte\";\n\n  import msoaLookup from '../data/MSOA-Names.csv';\n\n  import parksCountry from '../data/Country Parks only-Table 1.csv';\n  import parksRegion from '../data/Region Parks only-Table 1.csv';\n  import parksLad from '../data/LAD Parks only-Table 1.csv';\n  \n  import gardensCountry from '../data/Country gardens-Table 1.csv';\n  import gardensRegion from '../data/Region gardens-Table 1.csv';\n  import gardensLad from '../data/LAD gardens-Table 1.csv';\n  import testLoc from '../data/testLoc.json';\n\n  export let codes = {};\n  export let data = {};\n  // export let noOfFlats = 0;\n  \n  let gardenData = {};\n  let parksData = {};\n\n  let selectedDistrict = \"\";\n  let districtName = \"\";\n  let selectedLsoa = \"\";\n  let selectedLA = \"\";\n  let selectedRegion = \"\";\n  let selectedCountry = \"\";\n\n  $: parkRef = {\n    country: [],\n    region: [],\n    la: []\n  };\n\n  $: gardenRef = {\n    country: [],\n    region: [],\n    la: []\n  };\n\n  $: g = {};\n  $: p = {};\n  $: postcodeData = {};\n\n  const imdDecile = [\n    \"(among the 10% most deprived areas in England)\",\n    \"(among the 20% most deprived areas in England)\",\n    \"(among the 30% most deprived areas in England)\",\n    \"(among the 40% most deprived areas in England)\",\n    \"(among the 50% most deprived areas in England)\",\n    \"(among the 50% least deprived areas in England)\",\n    \"(among the 40% least deprived areas in England)\",\n    \"(among the 30% least deprived areas in England)\",\n    \"(among the 20% least deprived areas in England)\",\n    \"(among the 10% least deprived areas in England)\"\n  ]\n  \n  function processResponse(result, data) {\n    selectedDistrict = result.lad;\n    districtName = msoaLookup.filter(d => d[\"\\ufeffmsoa11cd\"] === result.msoa)[0].msoa11hclnm;\n    postcodeData = result;\n    selectedLsoa = result.lsoa;\n    selectedLA = result.lad;\n    selectedRegion = result.region;\n    selectedCountry = result.country;\n\n    parkRef.country = parksCountry.filter(d => d[\"Country code\"] === selectedCountry).map(d => ({\n      name: d[\"Country name\"],\n      ave: d[\"Average distance to nearest Park or Public Garden (m)\"]\n    }))\n\n    parkRef.region = parksRegion.filter(d => d[\"Region code\"] === selectedRegion).map(d => ({\n      name: d[\"Region name\"],\n      ave: d[\"Average distance to nearest Park or Public Garden (m)\"]\n    }))\n  \n    parkRef.la = parksLad.filter(d => d[\"LAD code\"] === selectedLA).map(d => ({\n      name: d[\"LAD name\"],\n      ave: d[\"Average distance to nearest Park, Public Garden, or Playing Field (m)\"]\n    }))\n\n    gardenRef.country = gardensCountry.filter(d => d[\"Country code\"] === selectedCountry)[0];\n\n    gardenRef.region = gardensRegion.filter(d => d[\"Region code\"] === selectedRegion)[0];\n  \n    gardenRef.la = gardensLad.filter(d => d[\"LAD code\"] === selectedLA)[0];\n\n    g = csvParse(data.gardens).filter(d => d.field7 === result.msoa)[0];\n    p = csvParse(data.parks).filter(d => d.field9 === selectedLsoa)[0];\n\n    return true;\n  }\n\n  $: hasLoaded = processResponse(codes, data);\n\n  $: lengths = [{\n    l: defNum(+parkRef.la[0].ave),\n    v: (+parkRef.la[0].ave),\n    fill: \"#E6B217\",\n    area: parkRef.la[0].name\n  },{\n    l: defNum(+parkRef.region[0].ave),\n    v: (+parkRef.region[0].ave),\n    fill: \"#0063E6\",\n    area: parkRef.region[0].name\n  },{\n    l: defNum(+parkRef.country[0].ave),\n    v: (+parkRef.country[0].ave),\n    fill: \"#c1002a\",\n    area: parkRef.country[0].name\n  },{\n    l: p.field13 ? defNum(+p.field13) : 0,\n    v: p.field13 ? (+p.field13) : 0,\n    fill: \"#7ec850\",\n    area: districtName,\n  }];\n\n  $: maxParkLength = lengths.slice(0).map(d => d.v).sort((a, b) => b - a)[0];\n\n  $: flatCount = g.field21;\n  // $: flatCount = noOfFlats;\n\n  let isIso = true;\n\n\tfunction toggleIso(newValue) {\n\t\tisIso = newValue.detail;\n  }\n</script>\n\n<div class=\"container\">\n  <p><strong>{districtName}</strong> {imdDecile[+p.field12 - 1]}</p>\n  <p><span class=\"area\">{g.field25}</span> of all residences have access to a private garden, compared to <span class=\"country\">{gardenRef.country.total_perc} in {gardenRef.country.Country},</span>\n  <span class=\"region\">{gardenRef.region.total_perc} in {gardenRef.region[\"Region name\"]}, </span> and\n  <span class=\"la\">{gardenRef.la.total_perc} in {gardenRef.la[\"LAD name\"]}</span></p>\n\n  <div class:isIso class=\"graphic-container houses\">\n    <span class=\"area\">{g.field12}</span> of houses in {districtName} have a private garden compared to\n    <span class=\"country\">{gardenRef.country.houses_perc},</span>\n      <span class=\"region\">{gardenRef.region.houses_perc},</span> and\n      <span class=\"la\">{gardenRef.la.houses_perc}</span>\n\n    <p>Houses have a median average of <span class=\"area\">{g.field14}m<sup>2</sup></span> private space.</p>\n    \n    <div aria-hidden=\"true\" class=\"pic-container\">\n      <House {isIso} />\n      <Field type=\"houses\" data={gardenRef} {isIso} size={g.field14} {districtName} />\n    </div>\n    </div>\n    <div class:isIso class=\"graphic-container\">\n    <span class=\"area\">{g.field19}</span> of flats have access to private space, compared to \n    <span class=\"country\">{gardenRef.country.flats_perc},</span>\n      <span class=\"region\">{gardenRef.region.flats_perc},</span> and\n      <span class=\"la\">{gardenRef.la.flats_perc}</span>\n    <p>Flats have an average outdoor space of <span class=\"area\">{g.field26}m<sup>2</sup></span>, shared by {defNum(+flatCount)} flats.</p>\n    <div aria-hidden=\"true\" class=\"pic-container\" style=\"height:{isIso ? (flatCount > 20 ? 200 + Math.floor(flatCount / 20) * 30 : 200) : \"200\"}px\">\n      <Flats {isIso} count={flatCount} />\n      <Field type=\"flats\" data={gardenRef} {isIso} size={g.field26} {districtName} />\n    </div>\n  </div>\n\n  <div class=\"isoCheck\">\n    <Toggle on:message={toggleIso} /> Toggle {toggleIso ? \"flat\" : \"isometric\"} view.\n  </div>\n\n  <div class=\"parks-summary\">\n    <p>Parks and Recreation: In <strong>{districtName}</strong>, the average distance to the nearest park is <span class=\"area\">{(+p.field13).toFixed(0)}m</span>, and there {+p.field15 < 1.5 ? \"is\" : \"are\"} {(+p.field15).toFixed(0)} park{+p.field15 < 1.5 ? \"\" : \"s\"} within a 1km radius.</p>\n\n    <Bar2 lines={lengths} formatTick={d => format(\",.0f\")(d) + \"m\"} />\n\n    <ul class=\"legend\">\n      <li class=\"country\">{lengths[2].area} - {lengths[2].l}m</li>\n      <li class=\"region\">{lengths[1].area} - {lengths[1].l}m</li>\n      <li class=\"la\">{lengths[0].area} - {lengths[0].l}m</li>\n      <li class=\"area\">{lengths[3].area} - {lengths[3].l}m</li>\n    </ul>\n\n  </div>\n  <div class=\"source-text\">Source: <a href=\"https://www.ons.gov.uk/economy/environmentalaccounts/datasets/accesstogardensandpublicgreenspaceingreatbritain\">ONS</a></div>\n</div>\n\n<style>\n  div.container {\n    width: 100%;\n    padding-left: 16px;\n  }\n\n  .graphic-container {\n    width: 45%;\n    min-width: 280px;\n    float: right;\n    padding: 8px 16px 8px 0;\n    padding-top: 48px;\n  }\n\n  .graphic-container p {\n    padding: 0;\n    min-height: 140px;\n  }\n\n  .houses {\n    float: left;\n    padding-bottom: 30px;\n  }\n\n  @media (max-width: 660px) {\n    .graphic-container {\n      float: none;\n      width: 75%;\n      margin: 0 auto;\n    }\n  }\n\n  .parks-summary {\n    clear: both;\n    padding-top: 48px;\n  }\n\n  .pic-container {\n    position: relative;\n    height: 200px;\n    margin-bottom: 50px;\n  }\n\n  span {\n    display: inline-block;\n    padding: 4px;\n  }\n\n  span.country {\n    background: #c1002a;\n    color: #fff;\n  }\n\n  span.region {\n    background: #0063E6;\n    color: #fff;\n  }\n\n  span.la {\n    background: #E6B217;\n  }\n\n  span.area {\n    background: #7ec850;\n  }\n\n  li {\n    padding-left: 8px;\n  }\n\n  li.country {\n    border-left: 10px solid #c1002a;\n  }\n\n  li.region {\n    border-left: 10px solid #0063E6;\n  }\n\n  li.la {\n    border-left: 10px solid #E6B217;\n  }\n\n  li.area {\n    border-left: 10px solid #7ec850;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n  }\n\n  ul.summary li {\n    margin-bottom: 20px;\n  }\n\n  .legend {\n    font-size: 0.75em;\n  }\n\n  .isoCheck {\n    clear: both;\n    padding-top: 20px;\n  }\n</style>",
    "<script>\n  export let count = 2;\n  export let isIso = true;\n\n  const flatWidth = 4;\n  const flatHeight = 5;\n  $: getCount = (j) => {\n    const i = j; \n    const c = Math.round(count);\n    return (c - (i * flatHeight)) > flatHeight ? flatHeight : (c - (i * flatHeight))\n  };\n\n  $: getOffset = (i) => {\n    return Math.floor(Math.abs(flatBlocks - (i + 1)) / flatWidth);\n  }\n\n  $: flatBlocks = Math.ceil(count / flatHeight);\n</script>\n{#each Array(flatBlocks).fill(0) as block, i}\n<div  class=\"svg-container\"\n      class:isIso \n      style=\"z-index:{Math.floor(i / flatWidth)}; \n              bottom:{100 + Math.floor((flatBlocks - i + 1) / flatWidth) * 25}px; \n              left:{180 + (i % flatWidth) * 55}px;\">\n\n<svg id=\"flat\" height={45 + getCount(i) * 20} class=\"container\">\n  {#each Array(Math.round(getCount(i))).fill(0).map((d, i) => i).sort((a, b) => b - a) as i}\n    <svg\n      width=\"60\"\n      height=\"45\"\n      class=\"flat\"\n      y={i * 20}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 85.47 70.7\">\n      <defs>\n        <style>.cls-1,.cls-2,.cls-3{stroke:#000;stroke-miterlimit:10;}.cls-2{fill:#777;}.cls-3{fill:#fff;}</style>\n      </defs>\n      <g id=\"Layer_2\" data-name=\"Layer 2\">\n        <g id=\"Layer_1-2\" data-name=\"Layer 1\">\n          <polygon class=\"cls-1\" points=\"84.36 51.33 42.34 70.13 1.22 51.33 42.34 30.47 84.36 51.33\" />\n          <polygon class=\"cls-2\" points=\"1.15 21.73 42.18 40.8 83.41 21.73 83.41 48.91 42.28 67.39 1.15 48.96 1.15 21.73\" />\n          <polygon class=\"cls-2\" points=\"84.3 21.42 42.28 40.22 1.15 21.42 42.28 0.56 84.3 21.42\" />\n          <polygon class=\"cls-3\" points=\"18.73 43.91 4.8 37.41 4.95 29.83 18.88 36.33 18.73 43.91\" />\n          <polygon class=\"cls-3\" points=\"36.69 52.45 22.75 45.95 22.9 38.36 36.83 44.86 36.69 52.45\" />\n          <polygon class=\"cls-3\" points=\"62.35 45.37 48.27 52.15 48.42 44.56 62.5 37.78 62.35 45.37\" />\n          <polygon class=\"cls-3\" points=\"80.32 36.33 66.24 43.11 66.39 35.53 80.47 28.75 80.32 36.33\" />\n      </g>\n      </g>\n    </svg>\n  {/each}\n</svg>\n</div>\n{/each}\n\n<style>\n  div.svg-container {    \n    position: absolute;\n    bottom: 120px;\n    left: 200px;\n    opacity: 0;\n    width: 50px;\n    transition: 0.5s opacity;\n  }\n\n  svg.container {\n    width: 60px;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n  }\n\n  div.svg-container.isIso {\n    opacity: 1;\n  }\n\n  svg.flat {\n    width: 60px;\n    height: 45x;\n  }\n</style>\n",
    "\n<script>\n  import Field from \"./field.svelte\";\n  import { scaleSqrt } from 'd3-scale';\n\n  export let isIso = true;\n  export let size = 10;\n  export let type = \"houses\";\n  export let data = {};\n  export let districtName = \"\";\n\n  const width = 200;\n  const gridSize = 20;\n\n  $: sizes = [\n    size,\n    +data.country[type + \"_ave\"],\n    +data.region[type + \"_ave\"],\n    +data.la[type + \"_ave\"]\n  ]\n\n  $: sortedSizes = sizes.slice(0).sort((a, b) => b - a);\n\n  $: scale = scaleSqrt().range([0, 200]).domain([0, 800]);\n  $: gridlines = Math.round(800 / gridSize);\n</script>\n\n<svg class:isIso class=\"container\">\n  <rect class=\"field\" width=\"{scale(sizes[0])}\" height=\"{scale(sizes[0])}\" x=\"{width - scale(sizes[0])}\" y=\"{width - scale(sizes[0])}\"></rect>\n  <rect class=\"outline country\" width=\"{scale(sizes[1])}\" height=\"{scale(sizes[1])}\" x=\"{width - scale(sizes[1])}\" y=\"{width - scale(sizes[1])}\"></rect>\n  <rect class=\"outline region\" width=\"{scale(sizes[2])}\" height=\"{scale(sizes[2])}\" x=\"{width - scale(sizes[2])}\" y=\"{width - scale(sizes[2])}\"></rect>\n  <rect class=\"outline la\" width=\"{scale(sizes[3])}\" height=\"{scale(sizes[3])}\" x=\"{width - scale(sizes[3])}\" y=\"{width - scale(sizes[3])}\"></rect>\n  {#each Array(gridlines).fill(0) as line, i}\n    <line x1={(i * gridSize)} x2={(i * gridSize)} y1={0} y2={width} />\n    <line y1={(i * gridSize)} y2={(i * gridSize)} x1={0} x2={width} />\n  {/each}\n</svg>\n\n<ul class=\"legend\">\n  <li class=\"country\">{data.country.Country} - {+data.country[type + \"_ave\"]}m<sup>2</sup></li>\n  <li class=\"region\">{data.region[\"Region name\"]} - {+data.region[type + \"_ave\"]}m<sup>2</sup></li>\n  <li class=\"la\">{data.la[\"LAD name\"]} - {+data.la[type + \"_ave\"]}m<sup>2</sup></li>\n  <li class=\"area\">{districtName} - {size}m<sup>2</sup></li>\n</ul>\n\n<style>\n  svg.container {\n    width: 200px;\n    height: 200px;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    transition: transform 0.5s;\n  }\n\n  svg.isIso {\n    transform: rotateX(60deg) rotateY(0deg) rotateZ(-45deg);\n  }\n\n  rect.outline {\n    fill: none;\n    stroke-width: 4px;\n  }\n\n  .country {\n    stroke: #c1002a;\n  }\n\n  .region {\n    stroke: #0063E6;\n  }\n\n  .la {\n    stroke: #E6B217;\n  }\n\n  ul {\n    position: absolute;\n    bottom: -85px;\n    left: 0;\n    font-size: 0.75em;\n    padding: 0;\n  }\n\n  li {\n    list-style: none;\n    padding-left: 8px;\n  }\n\n  li.country {\n    border-left: 10px solid #c1002a;\n  }\n\n  li.region {\n    border-left: 10px solid #0063E6;\n  }\n\n  li.la {\n    border-left: 10px solid #E6B217;\n  }\n\n  li.area {\n    border-left: 10px solid #7ec850;\n  }\n\n  rect.field {\n    fill: #7ec850;\n    stroke-width: 3px;\n  }\n  line {\n    stroke: #ccc;\n  }\n</style>",
    "<script>\n  export let isIso = true;\n</script>\n\n<style>\n  div.svg-container {\n    position: relative;\n    top: -110px;\n    left: 180px;\n    opacity: 0;\n    transition: 0.5s opacity;\n  }\n\n  svg {\n    position: absolute;\n    top: 105px;\n    left: 0;\n    width: 60px;\n  }\n\n  div.svg-container.isIso {\n    opacity: 1;\n  }\n</style>\n\n<div class:isIso class=\"svg-container\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 69.97 98.76\">\n    <defs>\n      <style>\n        .cl-1 {\n          fill: #cc4e5c;\n        }\n        .cl-1,\n        .cl-2,\n        .cl-3 {\n          stroke: #000;\n          stroke-miterlimit: 10;\n        }\n        .cl-2,\n        .cl-4 {\n          fill: #fff;\n        }\n        .cl-3 {\n          fill: #bcaab3;\n        }\n      </style>\n    </defs>\n    <g id=\"Layer_2\" data-name=\"Layer 2\">\n      <g id=\"Layer_2-2\" data-name=\"Layer 2\">\n        <polygon\n          class=\"cl-1\"\n          points=\"32.16 98.2 37.06 95.69 69.16 79.2 69.16 33.2 32.16 52.2 3.16\n          40.2 3.16 83.2 32.16 98.2\" />\n        <line class=\"cl-2\" x1=\"31.31\" y1=\"53.72\" x2=\"31.63\" y2=\"98.5\" />\n        <polygon\n          class=\"cl-2\"\n          points=\"12.68 87.84 6.67 84.84 6.49 68.93 12.5 71.93 12.68 87.84\" />\n        <polygon\n          class=\"cl-2\"\n          points=\"15.06 60.8 5.06 55.67 5.06 46.67 15.06 51.8 15.06 60.8\" />\n        <polyline class=\"cl-1\" points=\"69.05 36 50.18 17.37 31.33 54.02\" />\n        <polygon\n          class=\"cl-3\"\n          points=\"31.48 53.74 0.66 38.7 18.73 0.69 49.37 16.79 31.48 53.74\" />\n        <polygon\n          class=\"cl-2\"\n          points=\"28.25 67.68 18.25 62.55 18.25 53.55 28.25 58.68 28.25 67.68\" />\n        <polygon\n          class=\"cl-2\"\n          points=\"27.98 88.06 17.98 82.92 17.98 73.92 27.98 79.06 27.98 88.06\" />\n        <polygon\n          class=\"cl-4\"\n          points=\"66.5 32.75 71 36.98 73.71 31.93 68.5 31.7\" />\n      </g>\n    </g>\n  </svg>\n</div>\n",
    "<script>\n  import { LayerCake, Svg } from \"layercake\";\n  import AxisX from \"./AxisX.svelte\";\n  import Line from \"./track_line.svelte\";\n  import Box from \"./track_container.svelte\"; \n\n  export let msoaLabel = \"Your area\";\n  export let msoa = 0;\n  export let la = 0;\n  export let region = 0;\n  export let country = 0;\n  export let maxVal = 0;\n  export let formatTick = d => d + \"%\";\n\n  export let lines = [{\n    l: 275,\n    area: \"Your area\",\n    fill: \"#f00\"\n  },{\n    l: 386.67,\n    area: \"Your region\",\n    fill: \"#0f0\"\n  },{\n    l: 986.78,\n    area: \"England\",\n    fill: \"#00f\"\n  }];\n\n  $: getLines = () => {\n    if(msoa !== 0) {\n      lines = [{\n        l: la.replace(\"%\", \"\"),\n        v: la.replace(\"%\", \"\"),\n        fill: \"#E6B217\",\n      },{\n        l: region.replace(\"%\", \"\"),\n        v: region.replace(\"%\", \"\"),\n        fill: \"#0063E6\",\n      },{\n        l: country.replace(\"%\", \"\"),\n        v: country.replace(\"%\", \"\"),\n        fill: \"#c1002a\",\n      },{\n        l: msoa.replace(\"%\", \"\"),\n        v: msoa.replace(\"%\", \"\"),\n        area: msoaLabel,\n        fill: \"#7ec850\",\n      }];\n    }\n\n    return lines;\n  }\n\n  \n\n  $: data = getLines();\n\n  const padding = {top: 0, bottom: 20, left: 20, right: 20};\n\n  $: maxVal = maxVal > 0 ? maxVal : data.map(d => d.v).sort((a, b) => b - a)[0];\n\n</script>\n\n<div class=\"track\" aria-hidden=\"true\">\n  <LayerCake\n    {padding}\n    x=\"l\"\n    y=\"area\"\n    xDomain={[0, maxVal]}\n    {data}\n  >\n    <Svg>\n      <Box />\n      <Line />\n      <AxisX stroke=\"#000\" tickNumber={5} gridlines={true} {formatTick} />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  .track {\n    height: 40px;\n  }\n</style>",
    "<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n\n\tfunction toggleEvent(event) {\n\t\tdispatch('message', event.target.checked);\n  }\n</script>\n\n<label class=\"switch\">\n  <input checked on:change={(evt) => toggleEvent(evt)} type=\"checkbox\">\n  <span class=\"slider round\"></span>\n</label>\n\n<style>\n /* The switch - the box around the slider */\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 30px;\n  height: 16px;\n  top: 2px;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider */\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 14px;\n  width: 13px;\n  left: 2px;\n  bottom: 1px;\n  background-color: white;\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\ninput:checked + .slider {\n  background-color: #2196F3;\n}\n\ninput:focus + .slider {\n  box-shadow: 0 0 1px #2196F3;\n}\n\ninput:checked + .slider:before {\n  -webkit-transform: translateX(13px);\n  -ms-transform: translateX(13px);\n  transform: translateX(13px);\n}\n\n/* Rounded sliders */\n.slider.round {\n  border-radius: 34px;\n}\n\n.slider.round:before {\n  border-radius: 50%;\n} \n</style>",
    "<script>\n  export let msoa = 0;\n  export let la = 0;\n  export let region = 0;\n  export let country = 0;\n  export let max = 100;\n\n  const format = d => d.replace(\"%\", \"\").replace(\",\", \"\");\n</script>\n\n<div class=\"container\">\n  <div class=\"bar area\" style=\"width:{format(msoa) / max * 100}%\"></div>\n  <div class=\"bar la\" style=\"width:{format(la) / max * 100}%\"></div>\n  <div class=\"bar region\" style=\"width:{format(region) / max * 100}%\"></div>\n  <div class=\"bar country\" style=\"width:{format(country) / max * 100}%\"></div>\n</div>\n\n<style>\n  .container {\n    max-width: 500px;\n    width: 95%;\n    height: 20px;\n    border: 1px solid black;\n    position: relative;\n    margin: 8px 0;\n    margin-top: 18px;\n  }\n\n  .bar {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 20px;\n  }\n\n  .country {\n    border-right: 4px solid #c1002a;\n  }\n\n  .region {\n    border-right: 4px solid #0063E6;\n  }\n\n  .la {\n    border-right: 4px solid #E6B217;\n  }\n\n  .area {\n    border-right: 4px solid #7ec850;\n    top: -10px;\n    height: 30px;\n  }\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = (d, i) => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let tickNumber = undefined;\n\texport let fill = \"#000\";\n\texport let stroke = \"#000\";\n\texport let defaultAnchor = \"middle\";\n\n\t$: tickVals = Array.isArray(ticks) ? ticks : $xScale.ticks(tickNumber);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn defaultAnchor;\n\t}\n</script>\n\n<g class='axis x-axis' style=\"--fill: {fill}\">\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line stroke=\"{stroke}\" y1='-5' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text y='16' text-anchor='{textAnchor(i)}'>{formatTick(tick, i)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\t/* line,\n\t.tick line {\n\t\tstroke: var(--fill);\n\t} */\n\n\t.tick-1 line {\n\t\tstroke: #000;\n\t}\n\n\t.tick text {\n\t\tfill: var(--fill);\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n  import { getContext } from 'svelte';\n  const { width } = getContext('LayerCake');\n</script>\n\n<rect x=\"0\" y=\"15\" width=\"{$width}\" height=\"0.5\" class=\"container\"></rect>\n\n<style>\n  rect.container {\n    fill: #fafafa;\n    stroke:#222;\n  }\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\tlet zIndexStyle = '';\n\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tconst { padding } = getContext('LayerCake');\n\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\tlet zIndexStyle = '';\n\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}\"\n>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 350;\n\texport let containerHeight = height || 250;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst originalSettings = {};\n\t$: if (x) originalSettings.x = x;\n\t$: if (y) originalSettings.y = y;\n\t$: if (z) originalSettings.z = z;\n\t$: if (r) originalSettings.r = r;\n\t$: if (xDomain) originalSettings.xDomain = xDomain;\n\t$: if (yDomain) originalSettings.yDomain = yDomain;\n\t$: if (zDomain) originalSettings.zDomain = zDomain;\n\t$: if (rDomain) originalSettings.rDomain = rDomain;\n\t$: if (xRange) originalSettings.xRange = xRange;\n\t$: if (yRange) originalSettings.yRange = yRange;\n\t$: if (zRange) originalSettings.zRange = zRange;\n\t$: if (rRange) originalSettings.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d], ([$flatData, $activeGetters]) => {\n\t\treturn calcExtents($flatData, $activeGetters);\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\toriginalSettings: writable(originalSettings),\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n<div\n\tclass=\"layercake-container\"\n\tbind:clientWidth={containerWidth}\n\tbind:clientHeight={containerHeight}\n>\n\t<slot></slot>\n</div>\n\n<style>\n\t:global(.layercake-container),\n\t:global(.layercake-container *) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}
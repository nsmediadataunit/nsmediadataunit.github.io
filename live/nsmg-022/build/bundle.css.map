{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../LayerCake.svelte",
    "../../Html.svelte",
    "../../ScaledSvg.svelte",
    "../../Svg.svelte",
    "../../App.svelte",
    "../../AxisX.svelte",
    "../../AxisY.svelte",
    "../../scatter_plot.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { tweened } from 'svelte/motion';\n  import * as eases from 'svelte/easing';\n\n  import { timeParse, timeFormat } from \"d3-time-format\";\n  import { format } from \"d3-format\";\n  const numFormat = format(\",.0f\");\n  const dateParse = timeParse(\"%Y-%m-%d\");\n  const dateFormat = timeFormat(\"%b %-d\");\n\n  import survey from \"./data/survey.csv\";\n  import text from \"./data/text.csv\";\n  import filters from \"./data/filters.csv\";\n  \n  import ScatterPlot from \"./graphics/scatter_plot.svelte\";\n\n  const questions = survey.filter(d => d.question !== \"\").map(d => ({\n    id: d.id,\n    question: d.response\n  }))\n  let selectedQuestion = \"1\";\n  \n  $: questionText = questions.filter(d => d.id === selectedQuestion)[0].question;\n\n  $: selectedText = text.filter(d => d.id === selectedQuestion)[0].text;\n\n  const sectors = filters.slice(0, 10);\n  let selectedSector = \"\";\n\n  const sizes = filters.slice(10);\n  $: selectedSize = \"\";\n\n  function clearFilter(type) {\n    if(type === \"size\" && selectedSector !== \"\") {\n      selectedSize = \"\"\n    }\n    if(type === \"sector\" && selectedSize !== \"\") {\n      selectedSector = \"\"\n    }\n    selectedField = changeFilter();\n    setTimeout(() => {\n      pymChild.sendHeight();\n    }, 50);\n  }\n\n  const responses = survey.filter(d => d.question === \"\" && d.response !== \"\").map(d => {\n    let output = {\n      id: d.id,\n      response: d.response,\n    };\n\n    for(let i = 0; i < 14; i++) {\n      if(d[`sector_${i + 1}`] !== \"\") {\n        output[`sector_${i + 1}`] = +(d[`sector_${i + 1}`].replace(\"%\", \"\"))\n      }\n    }\n\n    return output;\n  });\n\n  $: selectedResponses = responses.filter(d => d.id === selectedQuestion);\n  $: questionSubtitle = () => {\n    if(selectedSector !== \"\") {\n      return \"Sector: \" + selectedSector;\n    }\n    if(selectedSize !== \"\") {\n      return \"Company size: \" + selectedSize;\n    }\n    return \"Overall\"\n  };\n\n  $: selectedField = \"sector_1\";\n\n  function changeSelected(dir) {\n    if(dir) {\n      selectedQuestion = (+selectedQuestion + dir).toString()\n    }\n    selectedField = \"sector_1\";\n    selectedSector = \"\";\n    selectedSize = \"\";\n    setTimeout(() => {\n      pymChild.sendHeight();\n    }, 50);\n  }\n\n  function changeFilter() {\n    let response = \"\";\n    if(selectedSize === \"\" && selectedSector === \"\") {\n      response = \"sector_1\";\n    }\n    else if(selectedSize !== \"\") {\n      response = \"sector_\" + sizes.filter(d => d.section === selectedSize)[0].id\n    }\n    else if(selectedSector !== \"\") {\n      response = \"sector_\" + sectors.filter(d => d.section === selectedSector)[0].id\n    }\n    return response;\n  }\n\n  $: chartData = selectedResponses.map(d => ({\n    ...d,\n    key: d.response,\n    value: d[selectedField]\n  }));\n\n  export let pymChild = {};\n  export let styleNs = false; // serif or san-serif;\n  export let title = \"NSMG-000\";\n\n\tonMount(() => {\n\t\t\tpymChild.sendHeight();\n  });\n</script>\n\n<svelte:head>\n  <title>{title}</title>\n  <link\n  href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700&display=swap\"\n  rel=\"stylesheet\" />\n</svelte:head>\n\n<div class=\"embed-container\" class:styleNs>\n\n  <div class=\"chart-container\">\n    <header>\n      <h3>{questionText}</h3>\n      <h4>{questionSubtitle()}</h4>\n      <p>{selectedText}</p>\n    </header>\n    <ScatterPlot data={chartData} />\n    <div class=\"source-text\">Source: New Statesman survey</div>\n\n  <label for=\"selQ\">Change question:</label>\n  <select id=\"selQ\" bind:value={selectedQuestion} on:change={() => changeSelected()}>\n    {#each questions as question}\n      <option value=\"{question.id}\">{question.question}</option>\n    {/each}\n  </select>\n  <button disabled={selectedQuestion === \"1\"} on:click={() => changeSelected(-1)} aria-label=\"previous\">&lt;</button>\n  <button disabled={selectedQuestion === \"15\"} on:click={() => changeSelected(1)} aria-label=\"next\">&gt;</button>\n\n  <div class=\"controls\">\n  {#if selectedResponses[0].sector_2}\n    <div>\n      <label for=\"selSector\">Filter by sector:</label>\n      <select id=\"selSector\" bind:value={selectedSector} on:change={() => clearFilter(\"size\")}>\n        <option value=\"\">Overall</option>\n        {#each sectors as sector}\n          <option value=\"{sector.section}\">{sector.section}</option>\n        {/each}\n      </select>\n    </div>\n  {/if}\n  {#if selectedResponses[0].sector_12}\n    <div>\n      <label for=\"selSize\">Select company size:</label>\n      <select id=\"selSize\" bind:value={selectedSize} on:change={() => clearFilter(\"sector\")}>\n        <option value=\"\">Overall</option>\n        {#each sizes as size}\n          <option value=\"{size.section}\">{size.section}</option>\n        {/each}\n      </select>\n    </div>\n  {/if}\n  </div>\n\n  </div>\n\n</div>\n\n<style>\n  @font-face{font-family:\"Unit OT\";src:url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.eot?#iefix\") format(\"embedded-opentype\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.woff\") format(\"woff\"), url(\"https://www.citymetric.com/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.ttf\") format(\"truetype\"), url(\"/sites/all/themes/creative-responsive-theme/fonts/unitot-webfont.svg#unitotregular\") format(\"svg\");font-style:normal;font-weight:normal}\n\n  .embed-container {\n    font-family: Unit OT, sans-serif;\n  }\n\n  label,\n  select {\n    font-family: Unit OT, sans-serif;\n  }\n\n  .embed-container {\n    width: 100%;\n    max-width: 720px;\n    box-sizing: border-box;\n  }\n\n  select {\n    width: calc(100% - 70px);\n  }\n\n  header {\n    min-height: 8em;\n  }\n\n  @media (max-width: 600px) {\n    header {\n      min-height: 10em;\n    }\n  }\n\n  :global(.chart-container) {\n    font-family: \"Source Sans Pro\", serif; /* catch IE not loading fonts */\n    width: 100%;\n    padding: 8px;\n    border-top: 1px solid black;\n    border-bottom: 1px solid black;\n    box-sizing: border-box;\n    margin-bottom: 8px;\n  }\n\n  :global(.source-text) {\n    color: #607a8a;\n    margin: 8px 0;\n    font-size: 0.75em;\n    margin-bottom: 16px;\n\t}\n\t\n\t:global(button) {\n\t\tmargin: 4px;\n\t}\n\n  :global(h3) {\n\t\tmargin: 0;\n\t\tpadding: 0;\n    font-family: Unit OT, sans-serif;\n  }\n  \n  :global(h4) {\n\t\tmargin: 0;\n    padding: 0;\n    color: #c1002a;\n    font-weight: normal;\n    font-family: Unit OT, sans-serif;\n  }\n\n  .controls {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding, xRange, xScale, yScale, width } = getContext('LayerCake');\n\n\texport let ticks = 4;\n\texport let gridlines = true;\n\texport let formatTick = d => { return $width > 500 ? d : d.replace(\" agree nor disagree\", \"\").replace(\" recovery\", \"\").replace(\"A \", \"\").replace(\"An \", \"\") };\n\texport let xTick = 0;\n\texport let yTick = 0;\n\texport let dxTick = 0;\n\texport let dyTick = -4;\n\texport let textAnchor = 'start';\n\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$yScale.domain() :\n\t\t\t$yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line\n\t\t\t\t\tx2='100%'\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx='{xTick}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n\t\t\t\tdx='{isBandwidth ? -5 : dxTick}'\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n\t\t\t>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\t.tick line {\n\t\tstroke: #aaa;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<script>\n  import { getContext } from 'svelte';\n  import { LayerCake, Svg, calcExtents } from 'layercake';\n  import { scaleBand } from \"d3-scale\";\n  import { format } from \"d3-format\";\n  import { tweened } from 'svelte/motion';\n  import * as eases from 'svelte/easing';\n\n  import AxisX from '../components/AxisX.svelte';\n  import AxisY from '../components/AxisY.svelte';\n  import ScatterSvg from '../components/ScatterSvg.svelte';\n\n  export let data = [];\n  export let padding = { top: 16, right: 32, bottom: 20, left: window.matchMedia(\"(min-width:500px)\").matches ? 128 : 96 };\n  export let xTicks = 6;\n  export let yTicks = 4;\n  export let formatTick = format(\",.0f\");\n\n  console.log(window.matchMedia(\"(min-width:500px)\"), padding);\n\n  const yKey = 'key';\n  $: yDomain = data.map(d => d.key);\n</script>\n\n<div class=\"svg-container\">\n  <LayerCake\n    {padding}\n    x={'value'}\n    y={'key'}\n    yDomain={yDomain}\n    yScale={scaleBand().paddingInner([0.05]).round(true)}\n    xDomain={[-2,100]}\n    data={data} >\n    <Svg>\n      <AxisX\n        ticks={xTicks}\n        gridlines={true}\n        {formatTick} />\n      <AxisY ticks={yTicks} gridlines={false}/>\n      <ScatterSvg/>\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  .svg-container{\n    width: 100%;\n    height: 15em;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}